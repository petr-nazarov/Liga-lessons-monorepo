var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.411,1,2.186]],["body/controllers/AppController.html",[0,2.082,1,3.226,2,1.596,3,0.392,4,0.348,5,0.348,6,3.164,7,0.625,8,1.236,9,4.865,10,2.082,11,0.029,12,4.908,13,0.904,14,3.763,15,1.236,16,1.332,17,3.763,18,3.61,19,4.908,20,0.506,21,0.584,22,2.963,23,3.164,24,3.763,25,3.763,26,0.392,27,0.227,28,1.727,29,1.1,30,1.849,31,2.769,32,2.769,33,3.763,34,3.763,35,3.763,36,0.021,37,0.021]],["title/modules/AppModule.html",[38,1.213,39,2.186]],["body/modules/AppModule.html",[1,3.16,2,1.76,3,0.306,4,0.272,5,0.272,8,0.74,11,0.029,13,0.541,15,0.74,20,0.573,21,0.456,22,3.102,23,2.47,26,0.306,27,0.177,36,0.018,37,0.018,38,1.753,39,4.214,40,1.348,41,1.348,42,1.747,43,1.747,44,1.463,45,2.859,46,1.594,47,2.47,48,2.47,49,2.47,50,3.4,51,3.4,52,3.4,53,3.102,54,2.467,55,1.747,56,1.747,57,2.939,58,2.467,59,2.939,60,4.148,61,5.224,62,2.939,63,0.859,64,0.587,65,0.416,66,0.859,67,2.939,68,2.47,69,4.148,70,2.939,71,2.162,72,1.155,73,2.939,74,2.939,75,2.939,76,1.931,77,2.939,78,2.939,79,2.727,80,2.939,81,2.162,82,2.939]],["title/interfaces/AppModuleOptions.html",[83,1.978,84,2.447]],["body/interfaces/AppModuleOptions.html",[3,0.457,4,0.406,5,0.406,7,0.457,11,0.028,16,1.592,20,0.406,21,0.681,26,0.563,36,0.023,37,0.023,65,0.621,83,2.609,84,3.979,85,3.228,86,3.228,87,3.228,88,2.482,89,6.122,90,4.387,91,1.485,92,4.387,93,4.387,94,4.387,95,2.38,96,3.688]],["title/injectables/AppService.html",[22,1.805,97,0.613]],["body/injectables/AppService.html",[3,0.465,4,0.413,5,0.413,7,0.465,8,1.377,9,5.177,11,0.028,13,0.822,15,1.124,16,1.484,20,0.413,21,0.693,22,2.966,26,0.465,27,0.269,30,1.511,31,3.283,32,3.283,36,0.023,37,0.023,97,1.007,98,1.754,99,3.752,100,4.463]],["title/controllers/AuthController.html",[0,1.411,101,2.186]],["body/controllers/AuthController.html",[0,1.195,2,1.195,3,0.293,4,0.261,5,0.261,7,0.293,8,1.015,10,1.993,11,0.029,13,0.866,15,1.184,20,0.537,21,0.437,26,0.293,27,0.17,28,1.293,29,0.824,30,1.736,36,0.017,37,0.017,63,1.373,64,0.939,65,0.665,66,1.373,91,0.954,95,1.529,101,2.647,102,2.369,103,2.073,104,2.369,105,2.375,106,3.385,107,3.385,108,2.818,109,3.727,110,4.027,111,2.818,112,1.591,113,2.818,114,3.049,115,2.818,116,2.818,117,3.37,118,2.818,119,4.027,120,2.818,121,1.852,122,1.852,123,2.369,124,2.818,125,2.549,126,2.369,127,1.852,128,2.369,129,2.073,130,2.369,131,1.676,132,2.818,133,0.824,134,1.676,135,2.818,136,2.818,137,2.818,138,2.818,139,2.369,140,2.369,141,2.818,142,2.549,143,2.818,144,2.818,145,2.818,146,2.818,147,2.818,148,2.369,149,2.818,150,2.818,151,2.818,152,2.818]],["title/classes/AuthDto.html",[27,0.2,109,1.978]],["body/classes/AuthDto.html",[3,0.395,4,0.351,5,0.351,7,0.395,10,2.092,11,0.028,13,0.908,16,1.575,20,0.456,26,0.513,27,0.228,36,0.021,37,0.021,65,0.698,88,2.263,91,1.283,109,2.932,127,2.492,131,2.254,153,2.057,154,2.789,155,4.185,156,4.185,157,4.931,158,3.815,159,3.791,160,3.791,161,3.791,162,3.187,163,5.481,164,2.932,165,3.187,166,3.187,167,3.187]],["title/guards/AuthGuard.html",[134,1.978,168,2.447]],["body/guards/AuthGuard.html",[3,0.34,4,0.302,5,0.302,7,0.34,8,1.124,11,0.029,13,0.822,15,0.822,20,0.471,21,0.506,26,0.34,27,0.197,28,1.498,29,0.954,30,1.85,36,0.019,37,0.019,63,1.304,64,0.892,65,0.632,66,1.304,81,2.401,91,1.85,97,0.822,134,2.654,169,3.264,170,2.744,171,5.723,172,1.282,173,2.744,174,4.347,175,3.264,176,3.264,177,4.595,178,3.264,179,4.462,180,4.462,181,2.222,182,5.085,183,1.941,184,2.744,185,2.744,186,3.264,187,3.264,188,3.751,189,2.744,190,3.264,191,5.085,192,3.264,193,4.274,194,2.744,195,1.625,196,2.421,197,2.744,198,2.744]],["title/modules/AuthModule.html",[38,1.213,50,1.978]],["body/modules/AuthModule.html",[2,2.112,3,0.401,4,0.356,5,0.356,11,0.028,20,0.54,21,0.597,26,0.401,27,0.232,36,0.021,37,0.021,38,2.012,40,1.766,41,1.766,42,2.288,43,2.288,44,1.916,45,3.282,46,2.088,50,3.798,53,3.36,54,2.961,55,2.288,56,2.288,58,2.961,101,3.628,125,3.36,126,3.234,199,3.234,200,3.848,201,3.234,202,3.848,203,3.848,204,3.848]],["title/injectables/AuthService.html",[97,0.613,125,1.805]],["body/injectables/AuthService.html",[3,0.265,4,0.236,5,0.236,7,0.265,8,0.943,11,0.029,13,0.817,15,0.943,20,0.504,21,0.395,26,0.265,27,0.154,29,1.094,30,1.267,36,0.016,37,0.016,63,1.297,64,0.886,65,0.628,66,1.297,91,1.995,95,2.407,97,0.689,98,1.001,105,2.14,106,3.729,107,3.729,109,3.348,112,1.267,114,2.225,125,2.03,128,2.141,133,0.744,142,2.653,148,3.146,155,3.214,156,3.58,172,1.471,174,4.142,183,1.515,196,2.407,205,1.874,206,2.547,207,2.712,208,2.547,209,2.547,210,2.547,211,2.547,212,2.547,213,2.547,214,3.146,215,2.547,216,2.753,217,1.382,218,2.03,219,3.742,220,2.547,221,2.547,222,3.146,223,2.547,224,3.742,225,2.547,226,3.742,227,2.547,228,2.547,229,4.436,230,2.547,231,3.742,232,2.547,233,3.742,234,2.547,235,2.141,236,2.547,237,1.515,238,2.547,239,2.547,240,2.547]],["title/classes/BaseController.html",[27,0.2,241,2.447]],["body/classes/BaseController.html",[3,0.289,4,0.257,5,0.257,7,0.289,8,1.003,10,2.286,11,0.029,13,1.033,15,1.358,16,1.634,20,0.368,21,0.43,26,0.289,27,0.167,29,0.81,30,1.824,36,0.017,37,0.017,63,1.575,64,1.077,65,0.763,66,1.575,121,2.616,122,3.061,153,1.504,172,1.564,218,1.504,241,2.928,242,2.331,243,1.688,244,2.158,245,1.982,246,1.982,247,1.982,248,2.773,249,2.574,250,2.773,251,1.381,252,2.319,253,2.773,254,1.982,255,2.773,256,1.381,257,3.981,258,2.773,259,2.793,260,1.381,261,2.773,262,2.773,263,1.381,264,2.534,265,2.319,266,3.981,267,2.773,268,2.331,269,2.773,270,2.773,271,2.773,272,2.773,273,2.773,274,2.331,275,2.773,276,2.773,277,2.773,278,2.773,279,2.773,280,2.773,281,2.773,282,2.773,283,2.773,284,2.773]],["title/classes/BaseModel.html",[27,0.2,285,1.805]],["body/classes/BaseModel.html",[3,0.449,4,0.399,5,0.399,7,0.449,10,1.83,11,0.028,13,0.986,16,1.652,20,0.399,26,0.449,27,0.26,36,0.023,37,0.023,64,1.163,65,0.758,72,1.695,88,2.456,153,2.34,237,3.461,285,2.904,286,3.626,287,4.314,288,4.282,289,4.314,290,3.183]],["title/injectables/BaseRepository.html",[97,0.613,291,1.526]],["body/injectables/BaseRepository.html",[3,0.2,4,0.178,5,0.178,7,0.2,8,0.76,11,0.029,13,0.973,15,1.285,16,1.475,20,0.425,21,0.298,26,0.2,27,0.116,29,0.56,30,1.727,36,0.013,37,0.013,63,1.491,64,1.019,65,0.722,66,1.491,72,0.754,91,1.883,95,1.04,97,0.555,98,0.754,105,2.458,112,1.555,133,0.56,142,2.768,172,1.185,181,1.501,195,2.103,217,1.04,218,1.04,237,1.14,243,1.279,244,1.792,245,1.501,246,1.501,247,1.501,251,1.501,252,1.855,254,0.955,256,1.501,259,1.855,260,1.501,263,1.501,264,2.103,265,1.855,285,2.022,291,1.384,292,1.612,293,1.636,294,2.022,295,1.918,296,3.108,297,1.918,298,1.918,299,2.022,300,1.918,301,1.636,302,1.918,303,1.918,304,1.04,305,2.103,306,1.918,307,2.022,308,1.918,309,1.918,310,1.411,311,1.04,312,1.918,313,1.612,314,1.918,315,1.982,316,2.449,317,1.918,318,1.918,319,4.225,320,1.918,321,1.918,322,3.726,323,1.918,324,1.918,325,1.918,326,5.101,327,3.726,328,1.918,329,1.918,330,3.015,331,1.918,332,1.918,333,1.793,334,3.015,335,1.918,336,1.918,337,1.918,338,1.918,339,1.918,340,1.918,341,3.015,342,1.918,343,1.918,344,1.918,345,1.918,346,1.918,347,1.918,348,1.918,349,1.918,350,1.918]],["title/injectables/BaseService.html",[97,0.613,249,1.526]],["body/injectables/BaseService.html",[3,0.232,4,0.206,5,0.206,7,0.232,8,0.852,11,0.029,13,1.022,15,1.397,16,1.542,20,0.379,21,0.345,26,0.232,27,0.134,29,0.65,30,1.753,36,0.014,37,0.014,63,1.573,64,1.075,65,0.762,66,1.573,97,0.623,98,0.874,105,2.511,112,1.664,133,0.65,142,2.92,164,2.01,172,1.328,181,1.683,195,1.683,217,1.834,218,1.206,243,1.434,244,1.939,245,1.683,246,1.683,247,1.683,249,1.551,251,1.683,252,2.037,254,1.107,256,1.683,259,2.037,260,1.683,263,1.683,264,2.276,265,2.037,291,2.376,293,1.834,294,2.219,299,1.834,301,2.219,304,1.206,305,2.276,307,2.219,313,1.869,315,2.222,316,2.222,333,2.01,351,1.869,352,2.223,353,2.223,354,2.223,355,2.223,356,2.223,357,2.223,358,2.223,359,2.487,360,2.689,361,2.487,362,2.487,363,2.487,364,2.487,365,2.223,366,2.223,367,2.223,368,2.223,369,2.223,370,2.223,371,2.223,372,2.223,373,2.223,374,2.223]],["title/modules/CoreModule.html",[38,1.213,51,1.978]],["body/modules/CoreModule.html",[3,0.459,4,0.408,5,0.408,11,0.029,20,0.544,21,0.684,26,0.459,27,0.266,36,0.023,37,0.023,38,1.977,40,2.022,46,2.39,51,3.225,58,2.62,79,3.565,183,2.62,375,4.406,376,5.423,377,5.423,378,4.406,379,3.704,380,4.406]],["title/classes/PostModel.html",[27,0.2,381,1.805]],["body/classes/PostModel.html",[3,0.368,4,0.327,5,0.327,7,0.368,10,1.996,11,0.028,13,0.975,16,1.437,20,0.49,26,0.551,27,0.213,36,0.02,37,0.02,64,1.058,65,0.833,72,1.388,88,2.16,91,1.196,133,1.032,153,1.916,196,2.553,198,3.956,237,2.799,285,3.19,288,4.153,290,2.799,311,1.916,381,2.553,382,2.321,383,2.343,384,4.45,385,5.293,386,3.532,387,3.532,388,4.706,389,4.706,390,3.532,391,2.553,392,3.532,393,2.969,394,2.969,395,3.462,396,2.969,397,2.969,398,2.321,399,2.969]],["title/controllers/PostsController.html",[0,1.411,400,2.186]],["body/controllers/PostsController.html",[0,1.136,2,1.136,3,0.279,4,0.248,5,0.248,7,0.279,8,0.978,10,1.647,11,0.029,13,0.715,15,0.978,20,0.542,21,0.416,26,0.279,27,0.161,28,1.229,29,0.783,30,1.696,31,1.971,32,1.971,36,0.016,37,0.016,63,1.135,64,0.776,65,0.55,66,1.135,91,1.696,103,1.971,105,2.301,112,1.315,114,2.978,117,3.494,121,2.552,122,3.494,123,2.252,129,1.971,130,2.252,131,1.593,133,1.335,134,1.593,139,2.252,140,2.252,142,2.717,243,1.937,244,1.136,305,2.494,384,2.252,400,2.552,401,2.252,402,5.719,403,3.883,404,2.679,405,4.207,406,2.679,407,2.679,408,2.679,409,4.567,410,2.107,411,2.252,412,2.679,413,2.679,414,2.679,415,2.679,416,2.679,417,2.679,418,3.883,419,2.679,420,2.679,421,2.679,422,2.679,423,2.679,424,2.679]],["title/modules/PostsModule.html",[38,1.213,52,1.978]],["body/modules/PostsModule.html",[2,1.922,3,0.348,4,0.309,5,0.309,11,0.029,20,0.573,21,0.518,26,0.348,27,0.201,36,0.019,37,0.019,38,1.875,40,1.531,41,1.531,42,1.985,43,1.985,44,1.662,45,3.059,46,1.811,52,3.681,54,2.694,55,1.985,56,1.985,58,1.985,64,0.667,71,2.455,72,1.311,249,2.079,290,1.985,291,2.079,381,1.811,398,2.978,400,3.381,410,3.301,411,2.806,425,2.806,426,2.806,427,3.301,428,3.338,429,3.338,430,2.455,431,2.194,432,2.806,433,2.194,434,2.806,435,3.338,436,3.809,437,3.809]],["title/injectables/PostsRepository.html",[97,0.613,427,1.805]],["body/injectables/PostsRepository.html",[3,0.265,4,0.236,5,0.236,7,0.265,8,0.943,11,0.028,13,1.064,15,1.418,16,1.478,20,0.521,21,0.395,26,0.265,27,0.154,29,0.744,36,0.016,37,0.016,63,1.645,64,1.125,65,0.797,66,1.645,72,1.001,97,0.689,98,1.001,105,2.46,112,1.764,133,1.094,172,1.471,181,1.268,218,1.382,243,1.587,244,1.882,245,1.863,246,1.863,247,1.863,251,1.268,252,1.863,254,1.268,256,1.268,259,2.209,260,1.268,263,1.268,264,1.863,265,1.863,291,2.75,293,2.03,294,2.03,296,3.597,299,1.382,301,1.382,304,1.382,305,1.863,307,1.382,310,1.874,311,1.382,381,2.407,383,1.863,391,3.054,405,1.874,427,2.03,430,1.874,433,1.674,438,2.141,439,2.547,440,2.547,441,2.141,442,2.141,443,2.141,444,2.141,445,2.141,446,2.141,447,2.141,448,2.141,449,2.547,450,2.547]],["title/injectables/PostsService.html",[97,0.613,410,1.805]],["body/injectables/PostsService.html",[3,0.261,4,0.232,5,0.232,7,0.261,8,0.931,11,0.028,13,1.059,15,1.411,16,1.469,20,0.501,21,0.389,26,0.261,27,0.151,28,1.149,29,0.732,36,0.016,37,0.016,63,1.636,64,1.119,65,0.793,66,1.636,97,0.681,98,0.984,105,2.453,112,1.751,133,1.08,164,1.489,172,0.984,181,1.247,195,1.247,217,1.358,243,1.567,244,1.863,245,1.84,246,1.84,247,1.84,249,2.738,251,1.247,252,1.84,254,1.247,256,1.247,259,2.187,260,1.247,263,1.247,264,1.84,265,1.84,293,2.005,294,2.005,299,1.358,301,2.005,304,1.358,305,1.84,307,1.358,315,1.646,316,1.646,333,1.489,359,1.842,360,1.646,361,1.842,362,1.842,363,1.842,364,1.842,381,1.358,383,1.84,391,3.038,405,1.842,410,2.005,427,2.937,430,1.842,431,1.646,432,2.105,448,2.105,451,2.105,452,2.504,453,2.504,454,2.105,455,2.105,456,2.105,457,2.105,458,2.105,459,2.105,460,2.105,461,2.504]],["title/interfaces/RequestWithUser.html",[83,1.978,462,2.186]],["body/interfaces/RequestWithUser.html",[3,0.461,4,0.41,5,0.41,7,0.461,11,0.028,20,0.503,26,0.461,36,0.023,37,0.023,65,0.627,83,2.631,85,3.255,88,2.495,114,3.652,133,1.293,196,3.332,383,2.707,462,3.574,463,3.72,464,4.949,465,3.255]],["title/injectables/TokenMiddleware.html",[76,2.186,97,0.613]],["body/injectables/TokenMiddleware.html",[3,0.336,4,0.298,5,0.298,7,0.336,8,1.115,11,0.029,13,0.815,15,0.812,20,0.527,21,0.5,26,0.336,27,0.194,28,1.479,29,0.942,30,1.71,36,0.019,37,0.019,63,1.293,64,0.884,65,0.626,66,1.293,68,2.709,76,2.908,81,2.371,91,1.71,97,0.815,98,1.266,112,1.091,114,1.917,133,0.942,172,1.266,173,2.709,174,4.33,183,1.917,185,3.719,188,3.719,189,2.709,193,3.719,194,2.709,195,1.605,196,2.741,197,2.709,462,2.118,465,2.371,466,2.709,467,4.424,468,3.223,469,4.424,470,5.052,471,5.437,472,6.029,473,5.437,474,3.223,475,4.424,476,3.223,477,3.223]],["title/classes/UserModel.html",[27,0.2,478,1.805]],["body/classes/UserModel.html",[3,0.372,4,0.33,5,0.33,7,0.372,10,2.257,11,0.028,13,1.044,16,1.646,20,0.493,26,0.554,27,0.215,36,0.02,37,0.02,64,0.947,65,0.835,72,1.402,88,2.174,91,1.208,153,1.936,155,3.497,156,3.497,237,2.818,285,3.201,288,4.462,290,2.818,311,1.936,383,2.359,391,2.571,393,3,394,3,395,3.486,396,3,478,2.571,479,2.345,480,3.568,481,3.568,482,3.568,483,3,484,2.345,485,3]],["title/controllers/UsersController.html",[0,1.411,486,2.186]],["body/controllers/UsersController.html",[0,1.463,2,1.463,3,0.359,4,0.319,5,0.319,7,0.359,8,1.167,10,1.965,11,0.029,13,0.853,15,1.167,20,0.518,21,0.535,26,0.359,27,0.208,28,1.583,29,1.008,30,1.568,36,0.02,37,0.02,63,1.008,64,0.689,65,0.488,66,1.008,91,1.568,103,2.537,105,2.36,112,1.568,121,2.267,122,3.438,129,2.537,131,2.051,133,1.008,142,2.513,196,2.513,207,2.604,222,4.397,243,1.965,244,2.372,274,2.899,486,3.045,487,2.899,488,3.449,489,4.419,490,3.449,491,3.449,492,2.899,493,3.449,494,3.449,495,3.449,496,3.449]],["title/modules/UsersModule.html",[38,1.213,53,1.805]],["body/modules/UsersModule.html",[2,1.876,3,0.336,4,0.298,5,0.298,11,0.029,20,0.568,21,0.5,26,0.336,27,0.194,36,0.019,37,0.019,38,1.842,40,1.479,41,1.479,42,1.917,43,1.917,44,1.605,45,3.004,46,2.741,53,3.38,54,2.631,55,1.917,56,1.917,58,1.917,64,0.644,71,2.371,72,1.266,207,3.217,249,2.03,290,1.917,291,2.03,431,2.118,433,2.118,434,2.709,436,3.719,437,3.719,478,1.749,484,2.908,486,3.32,492,2.709,497,2.709,498,2.709,499,2.709,500,3.271,501,3.223,502,3.223,503,2.371,504,2.709,505,3.223]],["title/injectables/UsersRepository.html",[97,0.613,500,1.805]],["body/injectables/UsersRepository.html",[3,0.265,4,0.236,5,0.236,7,0.265,8,0.943,11,0.028,13,1.064,15,1.418,16,1.478,20,0.521,21,0.395,26,0.265,27,0.154,29,0.744,36,0.016,37,0.016,63,1.645,64,1.125,65,0.797,66,1.645,72,1.001,97,0.689,98,1.001,105,2.46,112,1.764,133,1.094,172,1.471,181,1.268,218,1.382,243,1.587,244,1.882,245,1.863,246,1.863,247,1.863,251,1.268,252,1.863,254,1.268,256,1.268,259,2.209,260,1.268,263,1.268,264,1.863,265,1.863,291,2.75,293,2.03,294,2.03,296,3.597,299,1.382,301,1.382,304,1.382,305,1.863,307,1.382,310,1.874,311,1.382,383,1.863,391,3.054,433,1.674,441,2.141,442,2.141,443,2.141,444,2.141,445,2.141,446,2.141,447,2.141,478,2.407,489,1.874,500,2.03,503,1.874,506,2.141,507,2.547,508,2.547,509,2.141,510,2.547,511,2.547]],["title/injectables/UsersService.html",[97,0.613,207,1.656]],["body/injectables/UsersService.html",[3,0.261,4,0.232,5,0.232,7,0.261,8,0.931,11,0.028,13,1.059,15,1.411,16,1.469,20,0.501,21,0.389,26,0.261,27,0.151,28,1.149,29,0.732,36,0.016,37,0.016,63,1.636,64,1.119,65,0.793,66,1.636,97,0.681,98,0.984,105,2.453,112,1.751,133,1.08,164,1.489,172,0.984,181,1.247,195,1.247,207,1.84,217,1.358,243,1.567,244,1.863,245,1.84,246,1.84,247,1.84,249,2.738,251,1.247,252,1.84,254,1.247,256,1.247,259,2.187,260,1.247,263,1.247,264,1.84,265,1.84,293,2.005,294,2.005,299,1.358,301,2.005,304,1.358,305,1.84,307,1.358,315,1.646,316,1.646,333,1.489,359,1.842,360,1.646,361,1.842,362,1.842,363,1.842,364,1.842,383,1.84,391,3.038,431,1.646,454,2.105,455,2.105,456,2.105,457,2.105,458,2.105,459,2.105,460,2.105,478,1.358,489,1.842,500,2.937,503,1.842,504,2.105,509,2.105,512,2.105,513,2.504,514,2.504,515,2.504]],["title/changelog.html",[516,2.343,517,2.343,518,2.787]],["body/changelog.html",[7,0.217,11,0.014,18,2.367,20,0.193,36,0.014,37,0.014,41,2.973,268,5.463,519,2.705,520,1.752,521,6.499,522,3.218,523,3.218,524,2.084,525,2.084,526,6.48,527,2.084,528,2.084,529,2.084,530,3.218,531,3.218,532,2.084,533,2.084,534,2.084,535,2.084,536,2.084,537,2.084,538,3.218,539,2.084,540,2.084,541,2.084,542,2.084,543,3.218,544,2.084,545,2.084,546,2.084,547,2.084,548,3.218,549,3.218,550,2.084,551,2.084,552,2.084,553,3.218,554,3.93,555,2.084,556,2.084,557,2.084,558,3.218,559,2.084,560,2.084,561,2.084,562,3.218,563,2.084,564,2.084,565,2.084,566,3.218,567,4.422,568,2.084,569,2.084,570,2.084,571,2.084,572,3.218,573,3.218,574,2.084,575,3.218,576,2.084,577,2.084,578,2.084,579,2.084,580,3.218,581,3.93,582,2.084,583,2.084,584,2.084,585,3.218,586,2.084,587,2.084,588,2.084,589,3.218,590,2.084,591,2.084,592,2.084,593,3.218,594,2.084,595,2.084,596,2.084,597,2.084,598,3.218,599,2.084,600,2.084,601,2.084,602,3.218,603,2.084,604,2.084,605,2.084,606,3.218,607,2.084,608,2.084,609,2.084,610,2.084,611,3.218,612,2.084,613,2.084,614,2.084,615,2.084,616,3.218,617,2.084,618,2.084,619,2.084,620,3.218,621,2.084,622,2.084,623,2.084,624,2.084,625,2.084,626,3.218,627,2.084,628,2.084,629,2.084,630,3.218,631,2.084,632,2.084,633,2.084,634,3.218,635,2.084,636,2.084,637,2.084,638,2.084,639,2.084,640,3.218,641,2.084,642,2.084,643,2.084,644,3.218,645,3.218,646,2.084,647,2.084,648,2.084,649,3.218,650,2.084,651,2.084,652,2.084,653,2.084,654,2.084,655,2.084,656,2.084,657,2.084,658,2.084,659,3.218,660,2.084,661,2.084]],["title/coverage.html",[662,3.325]],["body/coverage.html",[0,2.091,1,1.704,5,0.24,6,2.179,11,0.028,22,1.406,27,0.316,36,0.016,37,0.016,44,1.29,65,0.367,76,1.704,79,1.704,83,2.254,84,1.907,86,2.789,87,2.789,95,1.406,97,1.091,99,2.179,101,1.704,102,2.179,109,1.541,117,1.704,125,1.406,127,1.704,134,1.541,154,2.789,168,1.907,170,2.179,205,2.789,207,1.29,216,1.907,241,1.907,242,2.179,249,1.189,285,1.406,286,2.179,291,1.189,292,2.179,351,2.179,360,1.704,381,1.406,382,2.491,398,1.704,400,1.704,401,2.179,410,1.406,427,1.406,438,2.179,451,2.179,462,1.704,463,2.179,466,2.179,478,1.406,479,2.491,484,1.704,486,1.704,487,2.179,500,1.406,506,2.179,512,2.179,662,1.907,663,2.592,664,2.592,665,2.592,666,2.179,667,6.017,668,2.789,669,6.657,670,6.098,671,5.66,672,4.481,673,2.179,674,2.789,675,2.179,676,4.481,677,2.179,678,2.592,679,4.481,680,4.481,681,4.481,682,2.592,683,2.179,684,2.592,685,2.592]],["title/dependencies.html",[41,1.833,686,2.343]],["body/dependencies.html",[11,0.029,21,0.653,36,0.022,37,0.022,41,1.931,72,1.654,131,2.503,133,1.54,162,3.538,183,2.503,184,3.538,214,3.538,311,2.283,465,3.096,668,3.096,687,5.756,688,4.208,689,4.208,690,4.208,691,4.208,692,4.208,693,4.208,694,4.208,695,4.208,696,4.208,697,4.208,698,4.208,699,4.208,700,4.208,701,4.208,702,4.208]],["title/miscellaneous/functions.html",[703,1.512,704,3.358]],["body/miscellaneous/functions.html",[7,0.526,11,0.025,36,0.025,37,0.025,44,3.102,674,3.717,703,2.741,704,4.248,705,4.248]],["title/index.html",[7,0.29,516,2.343,517,2.343]],["body/index.html",[4,0.331,11,0.028,36,0.02,37,0.02,158,2.353,519,3.01,567,3.993,662,2.634,706,3.581,707,3.581,708,4.75,709,3.581,710,3.581,711,3.581,712,3.581,713,3.581,714,5.33,715,3.581,716,3.581,717,3.581,718,3.581,719,6.194,720,3.581,721,3.01,722,3.581,723,6.071,724,3.581,725,3.581,726,4.75,727,3.581,728,3.581,729,3.581,730,3.581,731,4.75,732,3.581,733,3.581,734,3.581,735,4.75,736,4.75,737,3.581,738,3.581,739,3.581,740,3.581,741,3.581,742,3.01,743,3.581,744,3.581,745,3.581,746,3.581,747,3.581,748,3.581,749,3.581,750,3.581,751,3.581,752,3.581,753,3.01,754,3.581,755,3.581,756,3.581,757,3.581,758,3.581,759,3.581,760,3.01]],["title/modules.html",[40,2.074]],["body/modules.html",[11,0.024,36,0.024,37,0.024,39,3.066,40,2.14,50,2.774,51,2.774,52,2.774,53,2.531,742,5.256,761,6.252,762,6.252,763,6.397,764,4.665,765,4.665]],["title/overview.html",[766,3.8]],["body/overview.html",[2,1.448,11,0.028,22,2.824,36,0.02,37,0.02,38,1.245,39,4.257,40,1.567,41,1.567,42,2.031,43,2.031,44,1.7,45,2.031,46,1.853,47,2.871,48,2.871,49,2.871,50,3.64,51,3.095,52,3.64,53,3.421,54,2.736,55,2.031,56,2.031,85,2.512,98,1.342,125,2.824,153,1.853,168,2.512,195,1.7,199,2.871,201,2.871,207,3.048,235,2.871,410,2.824,425,2.871,426,2.871,427,2.824,497,2.871,498,2.871,499,2.871,500,2.824,766,2.871,767,4.602,768,3.415,769,3.415]],["title/properties.html",[88,1.833,686,2.343]],["body/properties.html",[11,0.028,18,3.663,36,0.025,37,0.025,88,2.285,158,3.273,520,4.186,753,4.186,760,4.186,770,4.98]],["title/miscellaneous/typealiases.html",[703,1.512,771,3.995]],["body/miscellaneous/typealiases.html",[7,0.511,11,0.025,36,0.025,37,0.025,65,0.695,382,3.226,395,4.258,397,4.866,479,3.226,483,4.866,703,2.663,772,4.909,773,4.126,774,4.126]],["title/miscellaneous/variables.html",[703,1.512,775,3.358]],["body/miscellaneous/variables.html",[7,0.293,11,0.029,16,1.091,30,0.951,36,0.017,37,0.017,65,0.767,79,2.642,86,2.068,87,2.957,91,1.588,95,2.181,96,2.363,104,2.363,112,0.951,117,2.642,127,2.642,154,2.068,155,1.847,156,1.847,158,1.847,164,1.671,165,2.363,166,2.363,167,2.363,177,2.363,205,2.068,216,2.957,217,1.525,333,1.671,379,2.363,382,1.847,398,2.642,399,2.363,464,2.363,479,1.847,484,2.642,485,2.363,666,3.379,668,4.145,673,2.363,674,2.068,675,3.379,677,2.363,683,2.363,703,1.525,705,2.363,721,3.379,773,2.363,774,2.363,775,2.363,776,2.811,777,2.811,778,2.811,779,2.811,780,2.811,781,2.811,782,6.201,783,6.127,784,2.811,785,2.811,786,2.811,787,2.811,788,2.811,789,4.019,790,4.019,791,4.019,792,4.019,793,4.019,794,2.811,795,2.811,796,2.811,797,2.811,798,2.811,799,2.811,800,2.811,801,2.811,802,2.811,803,2.811,804,2.811,805,2.811,806,2.811,807,2.811,808,2.811,809,2.811,810,4.019,811,2.811,812,2.811]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AppModuleOptions.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseModel.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"modules/CoreModule.html":{},"classes/PostModel.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TokenMiddleware.html":{},"classes/UserModel.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":669,"title":{},"body":{"coverage.html":{}}}],["0.0.2",{"_index":658,"title":{},"body":{"changelog.html":{}}}],["0.0.3",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["0.1.13",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":670,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":672,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":671,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":676,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":682,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":678,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":679,"title":{},"body":{"coverage.html":{}}}],["0c467f3",{"_index":532,"title":{},"body":{"changelog.html":{}}}],["0f1c60e",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":195,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["1.0.10",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["1.0.11",{"_index":625,"title":{},"body":{"changelog.html":{}}}],["1.0.12",{"_index":619,"title":{},"body":{"changelog.html":{}}}],["1.0.13",{"_index":615,"title":{},"body":{"changelog.html":{}}}],["1.0.14",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["1.0.15",{"_index":605,"title":{},"body":{"changelog.html":{}}}],["1.0.16",{"_index":601,"title":{},"body":{"changelog.html":{}}}],["1.0.17",{"_index":597,"title":{},"body":{"changelog.html":{}}}],["1.0.18",{"_index":592,"title":{},"body":{"changelog.html":{}}}],["1.0.19",{"_index":588,"title":{},"body":{"changelog.html":{}}}],["1.0.20",{"_index":584,"title":{},"body":{"changelog.html":{}}}],["1.0.21",{"_index":579,"title":{},"body":{"changelog.html":{}}}],["1.0.22",{"_index":571,"title":{},"body":{"changelog.html":{}}}],["1.0.23",{"_index":565,"title":{},"body":{"changelog.html":{}}}],["1.0.24",{"_index":561,"title":{},"body":{"changelog.html":{}}}],["1.0.25",{"_index":557,"title":{},"body":{"changelog.html":{}}}],["1.0.26",{"_index":552,"title":{},"body":{"changelog.html":{}}}],["1.0.27",{"_index":547,"title":{},"body":{"changelog.html":{}}}],["1.0.28",{"_index":542,"title":{},"body":{"changelog.html":{}}}],["1.0.29",{"_index":537,"title":{},"body":{"changelog.html":{}}}],["1.0.30",{"_index":528,"title":{},"body":{"changelog.html":{}}}],["1.0.31",{"_index":520,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["1.0.6",{"_index":648,"title":{},"body":{"changelog.html":{}}}],["1.0.7",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["1.0.8",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["1.0.9",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["1/9",{"_index":681,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["10.0.3",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["11",{"_index":680,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{}}}],["22bbfab",{"_index":522,"title":{},"body":{"changelog.html":{}}}],["24",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["2f6ed30",{"_index":558,"title":{},"body":{"changelog.html":{}}}],["3.22.3",{"_index":702,"title":{},"body":{"dependencies.html":{}}}],["30f3121",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["3192fce",{"_index":593,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":768,"title":{},"body":{"overview.html":{}}}],["47f134c",{"_index":538,"title":{},"body":{"changelog.html":{}}}],["5",{"_index":767,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["5.1.0",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["551a9d4",{"_index":602,"title":{},"body":{"changelog.html":{}}}],["596ba2a",{"_index":529,"title":{},"body":{"changelog.html":{}}}],["5b4ceb8",{"_index":585,"title":{},"body":{"changelog.html":{}}}],["6.3.0",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["6e397a5",{"_index":566,"title":{},"body":{"changelog.html":{}}}],["7.2.0",{"_index":701,"title":{},"body":{"dependencies.html":{}}}],["7.2.1",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["7686f57",{"_index":548,"title":{},"body":{"changelog.html":{}}}],["78e45fa",{"_index":543,"title":{},"body":{"changelog.html":{}}}],["7cd92e4",{"_index":616,"title":{},"body":{"changelog.html":{}}}],["9",{"_index":769,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["9.2.2",{"_index":691,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseModel.html":{},"injectables/BaseRepository.html":{},"classes/PostModel.html":{},"classes/UserModel.html":{}}}],["a2dbf88",{"_index":606,"title":{},"body":{"changelog.html":{}}}],["a87d94a",{"_index":626,"title":{},"body":{"changelog.html":{}}}],["a9ea2a4",{"_index":580,"title":{},"body":{"changelog.html":{}}}],["aa",{"_index":554,"title":{},"body":{"changelog.html":{}}}],["aah",{"_index":594,"title":{},"body":{"changelog.html":{}}}],["access_token",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":523,"title":{},"body":{"changelog.html":{}}}],["addbearerauth",{"_index":801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["adding",{"_index":635,"title":{},"body":{"changelog.html":{}}}],["addtag('cats",{"_index":808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ae779f1",{"_index":598,"title":{},"body":{"changelog.html":{}}}],["aliases",{"_index":772,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":743,"title":{},"body":{"index.html":{}}}],["api",{"_index":806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["apibearerauth('default",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["apiproperty",{"_index":163,"title":{},"body":{"classes/AuthDto.html":{}}}],["apiproperty({example",{"_index":157,"title":{},"body":{"classes/AuthDto.html":{}}}],["apitags",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('posts",{"_index":415,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":494,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":721,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["app.controller",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":713,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":39,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appmoduleoptions",{"_index":84,"title":{"interfaces/AppModuleOptions.html":{}},"body":{"interfaces/AppModuleOptions.html":{},"coverage.html":{}}}],["appservice",{"_index":22,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["asc",{"_index":330,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["async",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"controllers/PostsController.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.service",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.guard",{"_index":413,"title":{},"body":{"controllers/PostsController.html":{}}}],["auth/requestor.decorator",{"_index":412,"title":{},"body":{"controllers/PostsController.html":{}}}],["authcontroller",{"_index":101,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authdto",{"_index":109,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authdtoschema",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authdtoschema.safeparse(authdto",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["authguard",{"_index":134,"title":{"guards/AuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["authmodule",{"_index":50,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":753,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authorid",{"_index":384,"title":{},"body":{"classes/PostModel.html":{},"controllers/PostsController.html":{}}}],["authservice",{"_index":125,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":765,"title":{},"body":{"modules.html":{}}}],["await",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["b0d8999",{"_index":572,"title":{},"body":{"changelog.html":{}}}],["backers",{"_index":744,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception(validation",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["base",{"_index":790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["base.model",{"_index":312,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["base.repository",{"_index":367,"title":{},"body":{"injectables/BaseService.html":{}}}],["base.service",{"_index":273,"title":{},"body":{"classes/BaseController.html":{}}}],["base/base.model",{"_index":396,"title":{},"body":{"classes/PostModel.html":{},"classes/UserModel.html":{}}}],["base/base.repository",{"_index":433,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{}}}],["base/base.service",{"_index":431,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["basecontroller",{"_index":241,"title":{"classes/BaseController.html":{}},"body":{"classes/BaseController.html":{},"coverage.html":{}}}],["basemodel",{"_index":285,"title":{"classes/BaseModel.html":{}},"body":{"classes/BaseModel.html":{},"injectables/BaseRepository.html":{},"classes/PostModel.html":{},"classes/UserModel.html":{},"coverage.html":{}}}],["basemodel:10",{"_index":392,"title":{},"body":{"classes/PostModel.html":{}}}],["basemodel:5",{"_index":393,"title":{},"body":{"classes/PostModel.html":{},"classes/UserModel.html":{}}}],["basemodel:7",{"_index":482,"title":{},"body":{"classes/UserModel.html":{}}}],["baserepository",{"_index":291,"title":{"injectables/BaseRepository.html":{}},"body":{"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"modules/PostsModule.html":{},"injectables/PostsRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"coverage.html":{}}}],["baserepository:11",{"_index":445,"title":{},"body":{"injectables/PostsRepository.html":{},"injectables/UsersRepository.html":{}}}],["baserepository:45",{"_index":442,"title":{},"body":{"injectables/PostsRepository.html":{},"injectables/UsersRepository.html":{}}}],["baserepository:48",{"_index":441,"title":{},"body":{"injectables/PostsRepository.html":{},"injectables/UsersRepository.html":{}}}],["baserepository:53",{"_index":443,"title":{},"body":{"injectables/PostsRepository.html":{},"injectables/UsersRepository.html":{}}}],["baserepository:57",{"_index":444,"title":{},"body":{"injectables/PostsRepository.html":{},"injectables/UsersRepository.html":{}}}],["baserepository:61",{"_index":447,"title":{},"body":{"injectables/PostsRepository.html":{},"injectables/UsersRepository.html":{}}}],["baserepository:66",{"_index":446,"title":{},"body":{"injectables/PostsRepository.html":{},"injectables/UsersRepository.html":{}}}],["baseservice",{"_index":249,"title":{"injectables/BaseService.html":{}},"body":{"classes/BaseController.html":{},"injectables/BaseService.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["baseservice:19",{"_index":458,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["baseservice:27",{"_index":455,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["baseservice:30",{"_index":454,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["baseservice:34",{"_index":456,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["baseservice:38",{"_index":457,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["baseservice:42",{"_index":460,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["baseservice:46",{"_index":459,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["bcrypt",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["bearertoken",{"_index":188,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/TokenMiddleware.html":{}}}],["bearertoken.split",{"_index":194,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/TokenMiddleware.html":{}}}],["body",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"classes/BaseController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":180,"title":{},"body":{"guards/AuthGuard.html":{}}}],["bootstrap",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":763,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":761,"title":{},"body":{"modules.html":{}}}],["build",{"_index":809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["building",{"_index":709,"title":{},"body":{"index.html":{}}}],["bump",{"_index":645,"title":{},"body":{"changelog.html":{}}}],["c032205",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["canactivate",{"_index":171,"title":{},"body":{"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":176,"title":{},"body":{"guards/AuthGuard.html":{}}}],["cats",{"_index":805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["changelog",{"_index":518,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":521,"title":{},"body":{"changelog.html":{}}}],["changeste",{"_index":655,"title":{},"body":{"changelog.html":{}}}],["class",{"_index":27,"title":{"classes/AuthDto.html":{},"classes/BaseController.html":{},"classes/BaseModel.html":{},"classes/PostModel.html":{},"classes/UserModel.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseModel.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"modules/CoreModule.html":{},"classes/PostModel.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/TokenMiddleware.html":{},"classes/UserModel.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["classes",{"_index":153,"title":{},"body":{"classes/AuthDto.html":{},"classes/BaseController.html":{},"classes/BaseModel.html":{},"classes/PostModel.html":{},"classes/UserModel.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":425,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_providers",{"_index":426,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":497,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":498,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":499,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["conf",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["conf.auth.secret",{"_index":380,"title":{},"body":{"modules/CoreModule.html":{}}}],["config",{"_index":668,"title":{},"body":{"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["config.initialoptions",{"_index":789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.ts",{"_index":793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config@0.0.1",{"_index":660,"title":{},"body":{"changelog.html":{}}}],["config@0.0.2",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["config@1.0.10",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["config@1.0.11",{"_index":627,"title":{},"body":{"changelog.html":{}}}],["config@1.0.12",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["config@1.0.13",{"_index":617,"title":{},"body":{"changelog.html":{}}}],["config@1.0.14",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["config@1.0.15",{"_index":608,"title":{},"body":{"changelog.html":{}}}],["config@1.0.16",{"_index":603,"title":{},"body":{"changelog.html":{}}}],["config@1.0.17",{"_index":599,"title":{},"body":{"changelog.html":{}}}],["config@1.0.18",{"_index":595,"title":{},"body":{"changelog.html":{}}}],["config@1.0.19",{"_index":590,"title":{},"body":{"changelog.html":{}}}],["config@1.0.20",{"_index":586,"title":{},"body":{"changelog.html":{}}}],["config@1.0.21",{"_index":582,"title":{},"body":{"changelog.html":{}}}],["config@1.0.22",{"_index":577,"title":{},"body":{"changelog.html":{}}}],["config@1.0.23",{"_index":569,"title":{},"body":{"changelog.html":{}}}],["config@1.0.24",{"_index":563,"title":{},"body":{"changelog.html":{}}}],["config@1.0.25",{"_index":559,"title":{},"body":{"changelog.html":{}}}],["config@1.0.26",{"_index":555,"title":{},"body":{"changelog.html":{}}}],["config@1.0.27",{"_index":550,"title":{},"body":{"changelog.html":{}}}],["config@1.0.28",{"_index":545,"title":{},"body":{"changelog.html":{}}}],["config@1.0.29",{"_index":540,"title":{},"body":{"changelog.html":{}}}],["config@1.0.30",{"_index":527,"title":{},"body":{"changelog.html":{}}}],["config@1.0.6",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["config@1.0.7",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["config@1.0.8",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["config@1.0.9",{"_index":637,"title":{},"body":{"changelog.html":{}}}],["configurablemodulebuilder",{"_index":90,"title":{},"body":{"interfaces/AppModuleOptions.html":{}}}],["configurablemodulebuilder().build",{"_index":96,"title":{},"body":{"interfaces/AppModuleOptions.html":{},"miscellaneous/variables.html":{}}}],["configurablemoduleclass",{"_index":92,"title":{},"body":{"interfaces/AppModuleOptions.html":{}}}],["configure",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log('no",{"_index":192,"title":{},"body":{"guards/AuthGuard.html":{}}}],["console.log(bearertoken",{"_index":190,"title":{},"body":{"guards/AuthGuard.html":{}}}],["console.log(query",{"_index":421,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(req.headers",{"_index":187,"title":{},"body":{"guards/AuthGuard.html":{}}}],["const",{"_index":91,"title":{},"body":{"interfaces/AppModuleOptions.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BaseRepository.html":{},"classes/PostModel.html":{},"controllers/PostsController.html":{},"injectables/TokenMiddleware.html":{},"classes/UserModel.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":172,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["constructor(basemodel",{"_index":295,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["constructor(baserepository",{"_index":352,"title":{},"body":{"injectables/BaseService.html":{}}}],["constructor(baseservice",{"_index":248,"title":{},"body":{"classes/BaseController.html":{}}}],["constructor(jwtservice",{"_index":173,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/TokenMiddleware.html":{}}}],["constructor(postmodel",{"_index":439,"title":{},"body":{"injectables/PostsRepository.html":{}}}],["constructor(postsrepository",{"_index":452,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(private",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/TokenMiddleware.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(usermodel",{"_index":507,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["constructor(usersrepository",{"_index":513,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(tokenmiddleware).forroutes",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["context",{"_index":179,"title":{},"body":{"guards/AuthGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":186,"title":{},"body":{"guards/AuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":414,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":493,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["core.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["coremodule",{"_index":51,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["coverage",{"_index":662,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":243,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"controllers/PostsController.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":274,"title":{},"body":{"classes/BaseController.html":{},"controllers/UsersController.html":{}}}],["create(createdto",{"_index":251,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["create(createpostdto",{"_index":404,"title":{},"body":{"controllers/PostsController.html":{}}}],["create(createuserdto",{"_index":488,"title":{},"body":{"controllers/UsersController.html":{}}}],["createdmodel",{"_index":344,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["createdmodel.save",{"_index":346,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["createdto",{"_index":254,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["createparamdecorator",{"_index":794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpostdto",{"_index":405,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{}}}],["createuserdto",{"_index":489,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["ctx",{"_index":795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":534,"title":{},"body":{"changelog.html":{}}}],["current_time",{"_index":19,"title":{},"body":{"controllers/AppController.html":{}}}],["d285d72",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["data",{"_index":333,"title":{},"body":{"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["date().gettime",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["date.now",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["db",{"_index":785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BaseController.html":{},"classes/BaseModel.html":{},"classes/PostModel.html":{},"controllers/PostsController.html":{},"classes/UserModel.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defenition.ts",{"_index":87,"title":{},"body":{"interfaces/AppModuleOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseModel.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"classes/PostModel.html":{},"controllers/PostsController.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/TokenMiddleware.html":{},"classes/UserModel.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":270,"title":{},"body":{"classes/BaseController.html":{}}}],["delete(':id",{"_index":282,"title":{},"body":{"classes/BaseController.html":{}}}],["dependencies",{"_index":41,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"changelog.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":575,"title":{},"body":{"changelog.html":{}}}],["descibes",{"_index":359,"title":{},"body":{"injectables/BaseService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["description",{"_index":158,"title":{},"body":{"classes/AuthDto.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":722,"title":{},"body":{"index.html":{}}}],["docker",{"_index":621,"title":{},"body":{"changelog.html":{}}}],["document",{"_index":810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":663,"title":{},"body":{"coverage.html":{}}}],["documentbuilder",{"_index":800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto/auth.dto",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["e135652",{"_index":589,"title":{},"body":{"changelog.html":{}}}],["e2e",{"_index":732,"title":{},"body":{"index.html":{}}}],["e516ea5",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["e980415",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["efficient",{"_index":710,"title":{},"body":{"index.html":{}}}],["example",{"_index":164,"title":{},"body":{"classes/AuthDto.html":{},"injectables/BaseService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":177,"title":{},"body":{"guards/AuthGuard.html":{},"miscellaneous/variables.html":{}}}],["exp",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AppModuleOptions.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseModel.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"modules/CoreModule.html":{},"classes/PostModel.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TokenMiddleware.html":{},"classes/UserModel.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":465,"title":{},"body":{"interfaces/RequestWithUser.html":{},"injectables/TokenMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":383,"title":{},"body":{"classes/PostModel.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"interfaces/RequestWithUser.html":{},"classes/UserModel.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["f0d6568",{"_index":553,"title":{},"body":{"changelog.html":{}}}],["false",{"_index":191,"title":{},"body":{"guards/AuthGuard.html":{}}}],["fd94952",{"_index":562,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AppModuleOptions.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseModel.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"modules/CoreModule.html":{},"classes/PostModel.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TokenMiddleware.html":{},"classes/UserModel.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filter",{"_index":301,"title":{},"body":{"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["find",{"_index":293,"title":{},"body":{"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["find(filter",{"_index":299,"title":{},"body":{"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":244,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"controllers/PostsController.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["findallmodifined",{"_index":417,"title":{},"body":{"controllers/PostsController.html":{}}}],["findone",{"_index":245,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":277,"title":{},"body":{"classes/BaseController.html":{}}}],["findone(id",{"_index":256,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["findpaginated",{"_index":294,"title":{},"body":{"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["findpaginated(input",{"_index":304,"title":{},"body":{"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["findpaginated({meta",{"_index":361,"title":{},"body":{"injectables/BaseService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findpaginatedinput",{"_index":305,"title":{},"body":{"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"controllers/PostsController.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["findpaginatedresult",{"_index":313,"title":{},"body":{"injectables/BaseRepository.html":{},"injectables/BaseService.html":{}}}],["first",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["flow",{"_index":568,"title":{},"body":{"changelog.html":{}}}],["flows",{"_index":576,"title":{},"body":{"changelog.html":{}}}],["format",{"_index":364,"title":{},"body":{"injectables/BaseService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":708,"title":{},"body":{"index.html":{}}}],["function",{"_index":360,"title":{},"body":{"injectables/BaseService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["functions",{"_index":704,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/me",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/me')@apibearerauth('default')@useguards(authguard",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':id",{"_index":257,"title":{},"body":{"classes/BaseController.html":{}}}],["get('greeter/hello",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getpaginated",{"_index":403,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpaginated(@query",{"_index":420,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpaginated(query",{"_index":407,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":516,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["global",{"_index":376,"title":{},"body":{"modules/CoreModule.html":{}}}],["graph",{"_index":764,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":739,"title":{},"body":{"index.html":{}}}],["guard",{"_index":168,"title":{"guards/AuthGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":169,"title":{},"body":{"guards/AuthGuard.html":{}}}],["hashedpassword",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["hello",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/PostsController.html":{}}}],["here",{"_index":750,"title":{},"body":{"index.html":{}}}],["home",{"_index":536,"title":{},"body":{"changelog.html":{}}}],["http",{"_index":802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpcode",{"_index":271,"title":{},"body":{"classes/BaseController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":281,"title":{},"body":{"classes/BaseController.html":{}}}],["httpcode(httpstatus.no_content)@delete(':id",{"_index":261,"title":{},"body":{"classes/BaseController.html":{}}}],["https://nestjs.com",{"_index":757,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":272,"title":{},"body":{"classes/BaseController.html":{}}}],["hydrateddocument",{"_index":395,"title":{},"body":{"classes/PostModel.html":{},"classes/UserModel.html":{},"miscellaneous/typealiases.html":{}}}],["iat",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["id",{"_index":259,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":664,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/TokenMiddleware.html":{}}}],["import",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AppModuleOptions.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseModel.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"modules/CoreModule.html":{},"classes/PostModel.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TokenMiddleware.html":{},"classes/UserModel.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"changelog.html":{}}}],["imports",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"interfaces/AppModuleOptions.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseModel.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"classes/PostModel.html":{},"controllers/PostsController.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TokenMiddleware.html":{},"classes/UserModel.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AppModuleOptions.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseModel.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"modules/CoreModule.html":{},"classes/PostModel.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TokenMiddleware.html":{},"classes/UserModel.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["inherited",{"_index":391,"title":{},"body":{"classes/PostModel.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"classes/UserModel.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":97,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":98,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/TokenMiddleware.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":310,"title":{},"body":{"injectables/BaseRepository.html":{},"injectables/PostsRepository.html":{},"injectables/UsersRepository.html":{}}}],["injectmodel(basemodel.name",{"_index":314,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["injectmodel(postmodel.name",{"_index":449,"title":{},"body":{"injectables/PostsRepository.html":{}}}],["injectmodel(usermodel.name",{"_index":510,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["input",{"_index":307,"title":{},"body":{"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["installation",{"_index":718,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":720,"title":{},"body":{"index.html":{}}}],["interface",{"_index":83,"title":{"interfaces/AppModuleOptions.html":{},"interfaces/RequestWithUser.html":{}},"body":{"interfaces/AppModuleOptions.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["interfaces",{"_index":85,"title":{},"body":{"interfaces/AppModuleOptions.html":{},"interfaces/RequestWithUser.html":{},"overview.html":{}}}],["ispasswordvalid",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["jest.config.ts",{"_index":666,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":746,"title":{},"body":{"index.html":{}}}],["json",{"_index":525,"title":{},"body":{"changelog.html":{}}}],["jwtmodule",{"_index":377,"title":{},"body":{"modules/CoreModule.html":{}}}],["jwtmodule.register",{"_index":378,"title":{},"body":{"modules/CoreModule.html":{}}}],["jwtpayload",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"interfaces/RequestWithUser.html":{},"injectables/TokenMiddleware.html":{}}}],["jwtservice",{"_index":174,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/TokenMiddleware.html":{}}}],["kamil",{"_index":754,"title":{},"body":{"index.html":{}}}],["keyof",{"_index":325,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["legend",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":760,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":736,"title":{},"body":{"index.html":{}}}],["limit",{"_index":362,"title":{},"body":{"injectables/BaseService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["limit(perpage",{"_index":338,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["login",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(authdto",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(undefined",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AppModuleOptions.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseModel.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"modules/CoreModule.html":{},"classes/PostModel.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TokenMiddleware.html":{},"classes/UserModel.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(total",{"_index":342,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["me(@requestor",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["me(requestor",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["message",{"_index":419,"title":{},"body":{"controllers/PostsController.html":{}}}],["meta",{"_index":315,"title":{},"body":{"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["meta.page",{"_index":318,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["meta.perpage",{"_index":321,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["meta.sortby",{"_index":324,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["meta.sortorder",{"_index":329,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["meta?.page",{"_index":317,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["meta?.perpage",{"_index":320,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["meta?.sortby",{"_index":323,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["meta?.sortorder",{"_index":328,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["metadata",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"controllers/PostsController.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/TokenMiddleware.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["middlewareconsumer",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["miscellaneous",{"_index":703,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":735,"title":{},"body":{"index.html":{}}}],["mode",{"_index":726,"title":{},"body":{"index.html":{}}}],["model",{"_index":296,"title":{},"body":{"injectables/BaseRepository.html":{},"injectables/PostsRepository.html":{},"injectables/UsersRepository.html":{}}}],["module",{"_index":38,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["module_options_token",{"_index":93,"title":{},"body":{"interfaces/AppModuleOptions.html":{}}}],["modules",{"_index":40,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/auth/auth.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/auth/token.middleware",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/posts/posts.module",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["modules/users/users.module",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["mongodburi",{"_index":89,"title":{},"body":{"interfaces/AppModuleOptions.html":{}}}],["mongoose",{"_index":311,"title":{},"body":{"injectables/BaseRepository.html":{},"classes/PostModel.html":{},"injectables/PostsRepository.html":{},"classes/UserModel.html":{},"injectables/UsersRepository.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":434,"title":{},"body":{"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot(conf.db.uri",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":749,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":755,"title":{},"body":{"index.html":{}}}],["name",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseModel.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"classes/PostModel.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/TokenMiddleware.html":{},"classes/UserModel.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":714,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":759,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AppModuleOptions.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"modules/CoreModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/TokenMiddleware.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":183,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"modules/CoreModule.html":{},"injectables/TokenMiddleware.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"classes/BaseModel.html":{},"injectables/BaseRepository.html":{},"classes/PostModel.html":{},"modules/PostsModule.html":{},"injectables/PostsRepository.html":{},"classes/UserModel.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":475,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["nestmodule",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":95,"title":{},"body":{"interfaces/AppModuleOptions.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BaseRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":472,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["nextfunction",{"_index":473,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["node.js",{"_index":707,"title":{},"body":{"index.html":{}}}],["now",{"_index":530,"title":{},"body":{"changelog.html":{}}}],["number",{"_index":798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":182,"title":{},"body":{"guards/AuthGuard.html":{}}}],["open",{"_index":737,"title":{},"body":{"index.html":{}}}],["optional",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"controllers/PostsController.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/TokenMiddleware.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["options_type",{"_index":94,"title":{},"body":{"interfaces/AppModuleOptions.html":{}}}],["out",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":766,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":686,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["package.json",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["packagejson",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["packagejson.version",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["packages/config/jest/test",{"_index":792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["page",{"_index":316,"title":{},"body":{"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["param",{"_index":269,"title":{},"body":{"classes/BaseController.html":{}}}],["parameters",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"controllers/PostsController.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/TokenMiddleware.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["password",{"_index":155,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/UserModel.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":268,"title":{},"body":{"classes/BaseController.html":{},"changelog.html":{}}}],["patch(':id",{"_index":266,"title":{},"body":{"classes/BaseController.html":{}}}],["payload",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["perpage",{"_index":319,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["please",{"_index":747,"title":{},"body":{"index.html":{}}}],["post",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"classes/BaseController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["post.model",{"_index":430,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{}}}],["postdocument",{"_index":397,"title":{},"body":{"classes/PostModel.html":{},"miscellaneous/typealiases.html":{}}}],["postmodel",{"_index":381,"title":{"classes/PostModel.html":{}},"body":{"classes/PostModel.html":{},"modules/PostsModule.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["postmodel.name",{"_index":435,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts",{"_index":402,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":429,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.repository",{"_index":432,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["posts.service",{"_index":411,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["postschema",{"_index":398,"title":{},"body":{"classes/PostModel.html":{},"modules/PostsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postscontroller",{"_index":400,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postservice",{"_index":416,"title":{},"body":{"controllers/PostsController.html":{}}}],["postsmodule",{"_index":52,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":427,"title":{"injectables/PostsRepository.html":{}},"body":{"modules/PostsModule.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["postsservice",{"_index":410,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/UsersRepository.html":{}}}],["process.env.jwt_secret",{"_index":788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.mongo_uri",{"_index":787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":728,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":706,"title":{},"body":{"index.html":{}}}],["project",{"_index":738,"title":{},"body":{"index.html":{}}}],["promise",{"_index":181,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["promise.all",{"_index":335,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["prop",{"_index":288,"title":{},"body":{"classes/BaseModel.html":{},"classes/PostModel.html":{},"classes/UserModel.html":{}}}],["prop({type",{"_index":386,"title":{},"body":{"classes/PostModel.html":{}}}],["properties",{"_index":88,"title":{"properties.html":{}},"body":{"interfaces/AppModuleOptions.html":{},"classes/AuthDto.html":{},"classes/BaseModel.html":{},"classes/PostModel.html":{},"interfaces/RequestWithUser.html":{},"classes/UserModel.html":{},"properties.html":{}}}],["provide",{"_index":436,"title":{},"body":{"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["providers",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["publish",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["qqq",{"_index":539,"title":{},"body":{"changelog.html":{}}}],["query",{"_index":409,"title":{},"body":{"controllers/PostsController.html":{}}}],["read",{"_index":748,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"controllers/PostsController.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/TokenMiddleware.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["ref",{"_index":388,"title":{},"body":{"classes/PostModel.html":{}}}],["reflect",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(authdto",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(undefined",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["relase",{"_index":574,"title":{},"body":{"changelog.html":{}}}],["release",{"_index":581,"title":{},"body":{"changelog.html":{}}}],["remove",{"_index":246,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":283,"title":{},"body":{"classes/BaseController.html":{}}}],["remove(id",{"_index":260,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":717,"title":{},"body":{"index.html":{}}}],["req",{"_index":185,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/TokenMiddleware.html":{}}}],["req.headers['authorization",{"_index":189,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/TokenMiddleware.html":{}}}],["request",{"_index":464,"title":{},"body":{"interfaces/RequestWithUser.html":{},"miscellaneous/variables.html":{}}}],["request.type",{"_index":476,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["request.user",{"_index":797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requestor",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["requestor._id",{"_index":424,"title":{},"body":{"controllers/PostsController.html":{}}}],["requestor.decorator",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["requestwithuser",{"_index":462,"title":{"interfaces/RequestWithUser.html":{}},"body":{"interfaces/RequestWithUser.html":{},"injectables/TokenMiddleware.html":{},"coverage.html":{}}}],["requestwithuser).user",{"_index":477,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["required",{"_index":389,"title":{},"body":{"classes/PostModel.html":{}}}],["res",{"_index":470,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["reset",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":471,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["result",{"_index":363,"title":{},"body":{"injectables/BaseService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["results",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AppModuleOptions.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseModel.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"modules/CoreModule.html":{},"classes/PostModel.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TokenMiddleware.html":{},"classes/UserModel.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"controllers/PostsController.html":{},"injectables/TokenMiddleware.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"controllers/PostsController.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/TokenMiddleware.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["route",{"_index":531,"title":{},"body":{"changelog.html":{}}}],["run",{"_index":723,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":184,"title":{},"body":{"guards/AuthGuard.html":{},"dependencies.html":{}}}],["saltorrounds",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["scalable",{"_index":711,"title":{},"body":{"index.html":{}}}],["schema",{"_index":290,"title":{},"body":{"classes/BaseModel.html":{},"classes/PostModel.html":{},"modules/PostsModule.html":{},"classes/UserModel.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":394,"title":{},"body":{"classes/PostModel.html":{},"classes/UserModel.html":{}}}],["schemafactory.createforclass(postmodel",{"_index":399,"title":{},"body":{"classes/PostModel.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(usermodel",{"_index":485,"title":{},"body":{"classes/UserModel.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":379,"title":{},"body":{"modules/CoreModule.html":{},"miscellaneous/variables.html":{}}}],["see",{"_index":533,"title":{},"body":{"changelog.html":{}}}],["server",{"_index":519,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["setdescription('the",{"_index":804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["settitle('cats",{"_index":803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setupfiles",{"_index":791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setversion('1.0",{"_index":807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":712,"title":{},"body":{"index.html":{}}}],["skip",{"_index":331,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["skip(skip",{"_index":337,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["sort",{"_index":332,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["sort(sort",{"_index":339,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["sortby",{"_index":322,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["sortorder",{"_index":327,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"interfaces/AppModuleOptions.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"guards/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseModel.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"modules/CoreModule.html":{},"classes/PostModel.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TokenMiddleware.html":{},"classes/UserModel.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":741,"title":{},"body":{"index.html":{}}}],["src/.../app.module",{"_index":781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.dto.ts",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.service.ts",{"_index":780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../conf.ts",{"_index":777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":705,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../post.model.ts",{"_index":773,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../requestor.decorator.ts",{"_index":779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.model.ts",{"_index":774,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:15",{"_index":17,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module",{"_index":86,"title":{},"body":{"interfaces/AppModuleOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:23",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":99,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":100,"title":{},"body":{"injectables/AppService.html":{}}}],["src/conf.ts",{"_index":673,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core.module.ts",{"_index":375,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/main.ts",{"_index":674,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/auth.controller.ts",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/modules/auth/auth.controller.ts:23",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:29",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.controller.ts:38",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/modules/auth/auth.guard.ts",{"_index":170,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/modules/auth/auth.guard.ts:6",{"_index":175,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/modules/auth/auth.guard.ts:8",{"_index":178,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/modules/auth/auth.module.ts",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/modules/auth/auth.service.ts",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/auth.service.ts:10",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:16",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/auth.service.ts:25",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/modules/auth/dto/auth.dto.ts",{"_index":154,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/dto/auth.dto.ts:15",{"_index":159,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/modules/auth/dto/auth.dto.ts:9",{"_index":160,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/modules/auth/request.type.ts",{"_index":463,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/modules/auth/requestor.decorator.ts",{"_index":677,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/modules/auth/token.middleware.ts",{"_index":466,"title":{},"body":{"injectables/TokenMiddleware.html":{},"coverage.html":{}}}],["src/modules/auth/token.middleware.ts:10",{"_index":474,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["src/modules/auth/token.middleware.ts:8",{"_index":468,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["src/modules/base/base.controller.ts",{"_index":242,"title":{},"body":{"classes/BaseController.html":{},"coverage.html":{}}}],["src/modules/base/base.controller.ts:13",{"_index":250,"title":{},"body":{"classes/BaseController.html":{}}}],["src/modules/base/base.controller.ts:19",{"_index":253,"title":{},"body":{"classes/BaseController.html":{}}}],["src/modules/base/base.controller.ts:24",{"_index":255,"title":{},"body":{"classes/BaseController.html":{}}}],["src/modules/base/base.controller.ts:29",{"_index":258,"title":{},"body":{"classes/BaseController.html":{}}}],["src/modules/base/base.controller.ts:34",{"_index":267,"title":{},"body":{"classes/BaseController.html":{}}}],["src/modules/base/base.controller.ts:40",{"_index":262,"title":{},"body":{"classes/BaseController.html":{}}}],["src/modules/base/base.model.ts",{"_index":286,"title":{},"body":{"classes/BaseModel.html":{},"coverage.html":{}}}],["src/modules/base/base.model.ts:5",{"_index":287,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/modules/base/base.model.ts:7",{"_index":289,"title":{},"body":{"classes/BaseModel.html":{}}}],["src/modules/base/base.repository.ts",{"_index":292,"title":{},"body":{"injectables/BaseRepository.html":{},"coverage.html":{}}}],["src/modules/base/base.repository.ts:11",{"_index":306,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["src/modules/base/base.repository.ts:45",{"_index":300,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["src/modules/base/base.repository.ts:48",{"_index":298,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["src/modules/base/base.repository.ts:53",{"_index":302,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["src/modules/base/base.repository.ts:57",{"_index":303,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["src/modules/base/base.repository.ts:61",{"_index":309,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["src/modules/base/base.repository.ts:66",{"_index":308,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["src/modules/base/base.repository.ts:7",{"_index":297,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["src/modules/base/base.service.ts",{"_index":351,"title":{},"body":{"injectables/BaseService.html":{},"coverage.html":{}}}],["src/modules/base/base.service.ts:19",{"_index":358,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/modules/base/base.service.ts:27",{"_index":355,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/modules/base/base.service.ts:30",{"_index":354,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/modules/base/base.service.ts:34",{"_index":356,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/modules/base/base.service.ts:38",{"_index":357,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/modules/base/base.service.ts:42",{"_index":366,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/modules/base/base.service.ts:46",{"_index":365,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/modules/base/base.service.ts:5",{"_index":353,"title":{},"body":{"injectables/BaseService.html":{}}}],["src/modules/posts/post.model.ts",{"_index":382,"title":{},"body":{"classes/PostModel.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/posts/post.model.ts:13",{"_index":390,"title":{},"body":{"classes/PostModel.html":{}}}],["src/modules/posts/posts.controller.ts",{"_index":401,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/modules/posts/posts.controller.ts:23",{"_index":408,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/modules/posts/posts.controller.ts:35",{"_index":406,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/modules/posts/posts.module.ts",{"_index":428,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/modules/posts/posts.repository.ts",{"_index":438,"title":{},"body":{"injectables/PostsRepository.html":{},"coverage.html":{}}}],["src/modules/posts/posts.repository.ts:13",{"_index":440,"title":{},"body":{"injectables/PostsRepository.html":{}}}],["src/modules/posts/posts.service.ts",{"_index":451,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/modules/posts/posts.service.ts:12",{"_index":453,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/modules/users/user.model.ts",{"_index":479,"title":{},"body":{"classes/UserModel.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/modules/users/user.model.ts:10",{"_index":481,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/users/user.model.ts:12",{"_index":480,"title":{},"body":{"classes/UserModel.html":{}}}],["src/modules/users/users.controller.ts",{"_index":487,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/modules/users/users.controller.ts:12",{"_index":491,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.controller.ts:18",{"_index":490,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/modules/users/users.module.ts",{"_index":501,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/modules/users/users.repository.ts",{"_index":506,"title":{},"body":{"injectables/UsersRepository.html":{},"coverage.html":{}}}],["src/modules/users/users.repository.ts:14",{"_index":508,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["src/modules/users/users.service.ts",{"_index":512,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/modules/users/users.service.ts:13",{"_index":514,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":724,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":727,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":729,"title":{},"body":{"index.html":{}}}],["started",{"_index":517,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["starter",{"_index":716,"title":{},"body":{"index.html":{}}}],["statements",{"_index":665,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":751,"title":{},"body":{"index.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"interfaces/AppModuleOptions.html":{},"injectables/AppService.html":{},"classes/AuthDto.html":{},"classes/BaseController.html":{},"classes/BaseModel.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"classes/PostModel.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"classes/UserModel.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["super(postmodel",{"_index":450,"title":{},"body":{"injectables/PostsRepository.html":{}}}],["super(postsrepository",{"_index":461,"title":{},"body":{"injectables/PostsService.html":{}}}],["super(usermodel",{"_index":511,"title":{},"body":{"injectables/UsersRepository.html":{}}}],["super(usersrepository",{"_index":515,"title":{},"body":{"injectables/UsersService.html":{}}}],["suppirt",{"_index":524,"title":{},"body":{"changelog.html":{}}}],["support",{"_index":742,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":762,"title":{},"body":{"modules.html":{}}}],["swaggermodule.createdocument(app",{"_index":811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup('doc",{"_index":812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggersetup",{"_index":675,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":685,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":684,"title":{},"body":{"coverage.html":{}}}],["tcreatedto",{"_index":252,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["test",{"_index":567,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["test/.../jest.config.ts",{"_index":778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test/jest.config.ts",{"_index":683,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["test:covsupport",{"_index":734,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":733,"title":{},"body":{"index.html":{}}}],["testing",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["tests",{"_index":731,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":740,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(authdto",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.me",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(authdto",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.basemodel",{"_index":336,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["this.basemodel(createdto",{"_index":345,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["this.basemodel.countdocuments(filter",{"_index":340,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["this.basemodel.find",{"_index":347,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["this.basemodel.find(filter",{"_index":343,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["this.basemodel.findbyid(id",{"_index":348,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["this.basemodel.findbyidandremove(id",{"_index":350,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["this.basemodel.findbyidandupdate(id",{"_index":349,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["this.baserepository.create(createdto",{"_index":370,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.baserepository.find(filter",{"_index":369,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.baserepository.findall",{"_index":371,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.baserepository.findone(id",{"_index":372,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.baserepository.findpaginated(input",{"_index":368,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.baserepository.remove(id",{"_index":374,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.baserepository.update(id",{"_index":373,"title":{},"body":{"injectables/BaseService.html":{}}}],["this.baseservice.create(createdto",{"_index":275,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.findall",{"_index":276,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.findone(id",{"_index":278,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.remove(id",{"_index":284,"title":{},"body":{"classes/BaseController.html":{}}}],["this.baseservice.update(id",{"_index":280,"title":{},"body":{"classes/BaseController.html":{}}}],["this.jwtservice.sign(payload",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":197,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/TokenMiddleware.html":{}}}],["this.postservice.create",{"_index":423,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.findall",{"_index":418,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postservice.findpaginated(query",{"_index":422,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersservice.create",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":496,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.find",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findall",{"_index":495,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["time",{"_index":535,"title":{},"body":{"changelog.html":{}}}],["tmodel",{"_index":326,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["token",{"_index":193,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/TokenMiddleware.html":{}}}],["tokenmiddleware",{"_index":76,"title":{"injectables/TokenMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/TokenMiddleware.html":{},"coverage.html":{}}}],["total",{"_index":334,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["totalpages",{"_index":341,"title":{},"body":{"injectables/BaseRepository.html":{}}}],["touch",{"_index":752,"title":{},"body":{"index.html":{}}}],["true",{"_index":198,"title":{},"body":{"guards/AuthGuard.html":{},"classes/PostModel.html":{}}}],["try",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["tupdatedto",{"_index":265,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":758,"title":{},"body":{"index.html":{}}}],["type",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"interfaces/AppModuleOptions.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/BaseController.html":{},"classes/BaseModel.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"classes/PostModel.html":{},"controllers/PostsController.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TokenMiddleware.html":{},"classes/UserModel.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":771,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"classes/PostModel.html":{},"controllers/PostsController.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"interfaces/RequestWithUser.html":{},"injectables/TokenMiddleware.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["types.objectid",{"_index":385,"title":{},"body":{"classes/PostModel.html":{}}}],["types/bcrypt",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["types@0.0.3",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["types@0.0.4",{"_index":657,"title":{},"body":{"changelog.html":{}}}],["types@1.0.10",{"_index":632,"title":{},"body":{"changelog.html":{}}}],["types@1.0.11",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["types@1.0.12",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["types@1.0.13",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["types@1.0.14",{"_index":614,"title":{},"body":{"changelog.html":{}}}],["types@1.0.15",{"_index":609,"title":{},"body":{"changelog.html":{}}}],["types@1.0.16",{"_index":604,"title":{},"body":{"changelog.html":{}}}],["types@1.0.17",{"_index":600,"title":{},"body":{"changelog.html":{}}}],["types@1.0.18",{"_index":596,"title":{},"body":{"changelog.html":{}}}],["types@1.0.19",{"_index":591,"title":{},"body":{"changelog.html":{}}}],["types@1.0.20",{"_index":587,"title":{},"body":{"changelog.html":{}}}],["types@1.0.21",{"_index":583,"title":{},"body":{"changelog.html":{}}}],["types@1.0.22",{"_index":578,"title":{},"body":{"changelog.html":{}}}],["types@1.0.23",{"_index":570,"title":{},"body":{"changelog.html":{}}}],["types@1.0.24",{"_index":564,"title":{},"body":{"changelog.html":{}}}],["types@1.0.25",{"_index":560,"title":{},"body":{"changelog.html":{}}}],["types@1.0.26",{"_index":556,"title":{},"body":{"changelog.html":{}}}],["types@1.0.27",{"_index":551,"title":{},"body":{"changelog.html":{}}}],["types@1.0.28",{"_index":546,"title":{},"body":{"changelog.html":{}}}],["types@1.0.29",{"_index":541,"title":{},"body":{"changelog.html":{}}}],["types@1.0.6",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["types@1.0.7",{"_index":647,"title":{},"body":{"changelog.html":{}}}],["types@1.0.8",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["types@1.0.9",{"_index":638,"title":{},"body":{"changelog.html":{}}}],["typescript",{"_index":715,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":387,"title":{},"body":{"classes/PostModel.html":{}}}],["unified",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["unit",{"_index":730,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"controllers/PostsController.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/TokenMiddleware.html":{},"controllers/UsersController.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":770,"title":{},"body":{"properties.html":{}}}],["update",{"_index":247,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":279,"title":{},"body":{"classes/BaseController.html":{}}}],["update(id",{"_index":263,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":526,"title":{},"body":{"changelog.html":{}}}],["updatedto",{"_index":264,"title":{},"body":{"classes/BaseController.html":{},"injectables/BaseRepository.html":{},"injectables/BaseService.html":{},"injectables/PostsRepository.html":{},"injectables/PostsService.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["updatepostdto",{"_index":448,"title":{},"body":{"injectables/PostsRepository.html":{},"injectables/PostsService.html":{}}}],["updateuserdto",{"_index":509,"title":{},"body":{"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["uri",{"_index":786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":467,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["use(req",{"_index":469,"title":{},"body":{"injectables/TokenMiddleware.html":{}}}],["useclass",{"_index":437,"title":{},"body":{"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["useguards",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["useguards(authguard",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["user",{"_index":196,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/PostModel.html":{},"interfaces/RequestWithUser.html":{},"injectables/TokenMiddleware.html":{},"controllers/UsersController.html":{}}}],["user._id.tostring",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.model",{"_index":503,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["userdocument",{"_index":483,"title":{},"body":{"classes/UserModel.html":{},"miscellaneous/typealiases.html":{}}}],["usermodel",{"_index":478,"title":{"classes/UserModel.html":{}},"body":{"classes/UserModel.html":{},"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usermodel.name",{"_index":505,"title":{},"body":{"modules/UsersModule.html":{}}}],["username",{"_index":156,"title":{},"body":{"classes/AuthDto.html":{},"injectables/AuthService.html":{},"classes/UserModel.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":502,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.repository",{"_index":504,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":492,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/users.service",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["users[0",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["userschema",{"_index":484,"title":{},"body":{"classes/UserModel.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":486,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":53,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":500,"title":{"injectables/UsersRepository.html":{}},"body":{"modules/UsersModule.html":{},"injectables/UsersRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice",{"_index":207,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["validation",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["validation.success",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["value",{"_index":783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":667,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":775,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"changelog.html":{},"properties.html":{}}}],["versions",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["void",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"injectables/TokenMiddleware.html":{}}}],["watch",{"_index":725,"title":{},"body":{"index.html":{}}}],["website",{"_index":756,"title":{},"body":{"index.html":{}}}],["workflow",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["working",{"_index":573,"title":{},"body":{"changelog.html":{}}}],["world",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/PostsController.html":{}}}],["y",{"_index":544,"title":{},"body":{"changelog.html":{}}}],["yarn",{"_index":719,"title":{},"body":{"index.html":{}}}],["yes",{"_index":607,"title":{},"body":{"changelog.html":{}}}],["you'd",{"_index":745,"title":{},"body":{"index.html":{}}}],["yy",{"_index":549,"title":{},"body":{"changelog.html":{}}}],["z",{"_index":161,"title":{},"body":{"classes/AuthDto.html":{}}}],["z.object",{"_index":165,"title":{},"body":{"classes/AuthDto.html":{},"miscellaneous/variables.html":{}}}],["z.string().email",{"_index":166,"title":{},"body":{"classes/AuthDto.html":{},"miscellaneous/variables.html":{}}}],["z.string().min(8",{"_index":167,"title":{},"body":{"classes/AuthDto.html":{},"miscellaneous/variables.html":{}}}],["zod",{"_index":162,"title":{},"body":{"classes/AuthDto.html":{},"dependencies.html":{}}}],["zoom",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                            \n                                    \n                                index\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                    \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('greeter/hello')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        index\n                        \n                    \n                \n            \n            \n                \n                    \n                    index()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { version: any; current_time: any; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport * as packageJson from '../package.json';\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('greeter/hello')\n  getHello(): string {\n    return 'Hello World!';\n    return this.appService.getHello();\n  }\n\n  @Get()\n  index() {\n    return {\n      version: packageJson.version,\n      current_time: Date.now(),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PostsModule } from './modules/posts/posts.module';\nimport { UsersModule } from './modules/users/users.module';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { TokenMiddleware } from './modules/auth/token.middleware';\nimport { CoreModule } from './core.module';\nimport { conf } from './conf';\n@Module({\n  imports: [\n    MongooseModule.forRoot(conf.db.uri),\n    CoreModule,\n    PostsModule,\n    UsersModule,\n    AuthModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(TokenMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AppModuleOptions.html":{"url":"interfaces/AppModuleOptions.html","title":"interface - AppModuleOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AppModuleOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.module-defenition.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            mongodbURI\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mongodbURI\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mongodbURI:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ConfigurableModuleBuilder } from '@nestjs/common';\n\nexport interface AppModuleOptions {\n  mongodbURI: string;\n}\n\nexport const { ConfigurableModuleClass, MODULE_OPTIONS_TOKEN, OPTIONS_TYPE } =\n  new ConfigurableModuleBuilder().build();\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                me\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(authDto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        \n                        Async\n                        me\n                        \n                    \n                \n            \n            \n                \n                    \n                    me(requestor: JwtPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/me')@ApiBearerAuth('default')@UseGuards(AuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    requestor\n                                    \n                                            JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(authDto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/modules/auth/auth.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Post,\n  UseGuards,\n  BadRequestException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthDTOSchema, AuthDto } from './dto/auth.dto';\nimport { ApiTags, ApiBearerAuth } from '@nestjs/swagger';\nimport { Requestor } from './requestor.decorator';\nimport { JwtPayload } from 'types';\nimport { AuthGuard } from './auth.guard';\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Get('/me')\n  @ApiBearerAuth('default')\n  @UseGuards(AuthGuard)\n  async me(@Requestor() requestor: JwtPayload) {\n    return requestor;\n    //return await this.authService.me();\n  }\n\n  @Post('register')\n  async register(@Body() authDto: AuthDto) {\n    const validation = AuthDTOSchema.safeParse(authDto);\n    if (!validation.success) {\n      throw new BadRequestException(validation);\n    }\n    return await this.authService.register(authDto as AuthDto);\n  }\n\n  @Post('login')\n  async login(@Body() authDto: AuthDto) {\n    return await this.authService.login(authDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/dto/auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'password', description: 'Password'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'username', description: 'Username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/auth/dto/auth.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { z } from 'zod';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthDto {\n  @ApiProperty({\n    example: 'username',\n    description: 'Username',\n  })\n  username: string;\n\n  @ApiProperty({\n    example: 'password',\n    description: 'Password',\n  })\n  password: string;\n}\n\nexport const AuthDTOSchema = z.object({\n  username: z.string().email(),\n  password: z.string().min(8),\n});\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/modules/auth/auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.guard.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private readonly jwtService: JwtService) {}\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const req = context.switchToHttp().getRequest();\n    console.log(req.headers);\n    const bearerToken = req.headers['authorization'];\n    console.log(bearerToken);\n    if (!bearerToken) {\n      return false;\n      console.log('no token');\n    }\n\n    const token = bearerToken.split(' ')[1];\n    if (!token) {\n      return false;\n    }\n\n    const user = this.jwtService.verify(token);\n    if (!user) {\n      return false;\n    }\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [UsersModule],\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(undefined: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(undefined: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/auth.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersService } from '../users/users.service';\nimport { AuthDto } from './dto/auth.dto';\nimport { JwtPayload } from 'types';\n\nconst saltOrRounds = 10;\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async register({ username, password }: AuthDto) {\n    const hashedPassword = await bcrypt.hash(password, saltOrRounds);\n    const user = await this.usersService.create({\n      username,\n      password: hashedPassword,\n    });\n    return user;\n  }\n\n  async login({ username, password }: AuthDto) {\n    const users = await this.usersService.find({ username });\n\n    if (!users) {\n      throw new UnauthorizedException('Invalid username');\n    }\n    const user = users[0];\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n    if (!isPasswordValid) {\n      throw new UnauthorizedException('Invalid password');\n    }\n    const iat = new Date().getTime();\n    const exp = iat + 1000 * 60 * 60 * 24 * 2;\n    const payload: JwtPayload = {\n      _id: user._id.toString(),\n      username,\n      iat,\n      exp,\n    };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseController.html":{"url":"classes/BaseController.html","title":"class - BaseController","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/base/base.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(baseService: BaseService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/base/base.controller.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        baseService\n                                                  \n                                                        \n                                                                        BaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: TCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/base/base.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                            TCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/base/base.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/base/base.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.NO_CONTENT)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/base/base.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: TUpdateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/modules/base/base.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                            TUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { BaseService } from './base.service';\n\nexport class BaseController {\n  constructor(\n    private readonly baseService: BaseService,\n  ) {}\n\n  @Post()\n  create(@Body() createDto: TCreateDto) {\n    return this.baseService.create(createDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.baseService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.baseService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateDto: TUpdateDto) {\n    return this.baseService.update(id, updateDto);\n  }\n\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.baseService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseModel.html":{"url":"classes/BaseModel.html","title":"class - BaseModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/base/base.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/modules/base/base.model.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/base/base.model.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema } from '@nestjs/mongoose';\n\n@Schema()\nexport class BaseModel {\n  _id: string;\n  @Prop()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BaseRepository.html":{"url":"injectables/BaseRepository.html","title":"injectable - BaseRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BaseRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/base/base.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPaginated\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(baseModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/base/base.repository.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        baseModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: TCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/base/base.repository.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                            TCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(filter: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/base/base.repository.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/base/base.repository.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/base/base.repository.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPaginated\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPaginated(input: FindPaginatedInput)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/base/base.repository.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                            FindPaginatedInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/base/base.repository.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: TUpdateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/base/base.repository.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                            TUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { BaseModel } from './base.model';\nimport { FindPaginatedInput, FindPaginatedResult } from 'types';\n@Injectable()\nexport class BaseRepository {\n  constructor(\n    @InjectModel(BaseModel.name) private readonly baseModel: Model,\n  ) {}\n  async findPaginated(\n    input: FindPaginatedInput,\n  ): Promise> {\n    const { meta, filter } = input;\n    const page = meta?.page ? meta.page : 1;\n    const perPage = meta?.perPage ? meta.perPage : 10;\n    const sortBy = meta?.sortBy ? meta.sortBy : ('_id' as keyof TModel);\n    const sortOrder = meta?.sortOrder ? meta.sortOrder : 'ASC';\n\n    const skip = (page - 1) * perPage;\n    const sort = {\n      [sortBy]: sortOrder === 'ASC' ? 1 : -1,\n    } as any;\n    const [data, total] = await Promise.all([\n      this.baseModel\n        .find(filter as any)\n        .skip(skip as any)\n        .limit(perPage as any)\n        .sort(sort as any),\n      this.baseModel.countDocuments(filter as any),\n    ]);\n    const totalPages = Math.ceil(total / perPage);\n    return {\n      data,\n      meta: {\n        page,\n        perPage,\n        sortBy,\n        sortOrder,\n        total,\n        totalPages,\n      },\n    };\n  }\n  async find(filter: any) {\n    return (await this.baseModel.find(filter)) as TModel[];\n  }\n  async create(createDto: TCreateDto) {\n    const createdModel = new this.baseModel(createDto);\n    return (await createdModel.save()) as TModel;\n  }\n\n  async findAll() {\n    return (await this.baseModel.find()) as TModel[];\n  }\n\n  async findOne(id: string) {\n    return (await this.baseModel.findById(id)) as TModel;\n  }\n\n  async update(id: string, updateDto: TUpdateDto) {\n    return {} as TModel;\n    //return await this.baseModel.findByIdAndUpdate(id, updateDto) as TModel;\n  }\n\n  async remove(id: string) {\n    await this.baseModel.findByIdAndRemove(id);\n  }\n} \n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BaseService.html":{"url":"injectables/BaseService.html","title":"injectable - BaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/base/base.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPaginated\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(baseRepository: BaseRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/base/base.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        baseRepository\n                                                  \n                                                        \n                                                                        BaseRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: TCreateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/base/base.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                            TCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(filter: any)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/base/base.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/modules/base/base.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/base/base.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPaginated\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPaginated(input: FindPaginatedInput)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/base/base.service.ts:19\n                \n            \n\n\n            \n                \n                    This descibes the function\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                            FindPaginatedInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            findPaginated({meta: {limit: 10, page: 1}, filter: {}})\n                        \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        result in format of data and meta\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/base/base.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: TUpdateDto)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/base/base.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                            TUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { BaseRepository } from './base.repository';\nimport { FindPaginatedInput, FindPaginatedResult } from 'types';\n@Injectable()\nexport class BaseService {\n  constructor(\n    private readonly baseRepository: BaseRepository,\n  ) {}\n\n  /**\n   * This descibes the function\n   * @returns result in format of data and meta\n   * @example findPaginated({meta: {limit: 10, page: 1}, filter: {}})\n   */\n  async findPaginated(\n    /**\n      * This is the input for the function\n      */\n    input: FindPaginatedInput,\n  ): Promise> {\n    return await this.baseRepository.findPaginated(input);\n  }\n  async find(filter: any) {\n    return await this.baseRepository.find(filter);\n  }\n  async create(createDto: TCreateDto) {\n    return await this.baseRepository.create(createDto);\n  }\n\n  async findAll() {\n    return await this.baseRepository.findAll();\n  }\n\n  async findOne(id: string) {\n    return await this.baseRepository.findOne(id);\n  }\n\n  async update(id: string, updateDto: TUpdateDto) {\n    return await this.baseRepository.update(id, updateDto);\n  }\n\n  async remove(id: string) {\n    await this.baseRepository.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { conf } from './conf';\n@Global()\n@Module({\n  imports: [\n    JwtModule.register({\n      secret: conf.auth.secret,\n    }),\n  ],\n  exports: [JwtModule],\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostModel.html":{"url":"classes/PostModel.html","title":"class - PostModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/posts/post.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseModel\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorId\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                _id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: 'User', required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/posts/post.model.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseModel\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseModel:10\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseModel\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseModel:5\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument, Types } from 'mongoose';\nimport { BaseModel } from '../base/base.model';\n\nexport type PostDocument = HydratedDocument;\n\n@Schema()\nexport class PostModel extends BaseModel {\n  @Prop()\n  name: string;\n\n  @Prop({ type: Types.ObjectId, ref: 'User', required: true })\n  authorId: Types.ObjectId;\n}\n\nexport const PostSchema = SchemaFactory.createForClass(PostModel);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                getPaginated\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createPostDto: CreatePostDto, requestor: JwtPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/posts/posts.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPostDto\n                                    \n                                            CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    requestor\n                                    \n                                            JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        getPaginated\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPaginated(query: FindPaginatedInput)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/posts/posts.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                            FindPaginatedInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Query, UseGuards } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { CreatePostDto } from 'types';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { JwtPayload } from 'types';\nimport { Requestor } from '../auth/requestor.decorator';\nimport { AuthGuard } from '../auth/auth.guard';\nimport { FindPaginatedInput } from 'types';\n@Controller('posts')\n@ApiTags('posts')\n@ApiBearerAuth('default')\n@UseGuards(AuthGuard)\nexport class PostsController {\n  constructor(private readonly postService: PostsService) {}\n\n  // @Get()\n  // async findAllModifined() {\n  //   const posts = await this.postService.findAll();\n  //   return { message: 'hello world', posts };\n  // }\n\n  @Get()\n  async getPaginated(@Query() query: FindPaginatedInput) {\n    console.log(query);\n    const posts = await this.postService.findPaginated(query);\n    return posts;\n  }\n  // @Get()\n  // async findAll() {\n  //   const posts = await this.postService.findAll();\n  //   return posts;\n  // }\n\n  @Post()\n  async create(\n    @Body() createPostDto: CreatePostDto,\n    @Requestor() requestor: JwtPayload,\n  ) {\n    const post = await this.postService.create({\n      ...createPostDto,\n      authorId: requestor._id,\n    });\n    return post;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPostsRepository\n\nPostsRepository\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPostsRepository->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsRepository\n                        \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PostModel, PostSchema } from './post.model';\nimport { BaseService } from '../base/base.service';\nimport { PostsRepository } from './posts.repository';\nimport { BaseRepository } from '../base/base.repository';\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: PostModel.name, schema: PostSchema }]),\n  ],\n  controllers: [PostsController],\n  providers: [\n    {\n      provide: BaseService,\n      useClass: PostsService,\n    },\n    PostsService,\n    PostsRepository,\n    {\n      provide: BaseRepository,\n      useClass: PostsRepository,\n    },\n  ],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsRepository.html":{"url":"injectables/PostsRepository.html","title":"injectable - PostsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/posts/posts.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseRepository\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPaginated\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/posts/posts.repository.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: TCreateDto)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseRepository\n\n                \n            \n            \n                \n                        Defined in         BaseRepository:48\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                            TCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(filter: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseRepository\n\n                \n            \n            \n                \n                        Defined in         BaseRepository:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseRepository\n\n                \n            \n            \n                \n                        Defined in         BaseRepository:53\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseRepository\n\n                \n            \n            \n                \n                        Defined in         BaseRepository:57\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPaginated\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPaginated(input: FindPaginatedInput)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseRepository\n\n                \n            \n            \n                \n                        Defined in         BaseRepository:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                            FindPaginatedInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseRepository\n\n                \n            \n            \n                \n                        Defined in         BaseRepository:66\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: TUpdateDto)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseRepository\n\n                \n            \n            \n                \n                        Defined in         BaseRepository:61\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                            TUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePostDto } from 'types';\nimport { UpdatePostDto } from 'types';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { PostModel } from './post.model';\nimport { BaseRepository } from '../base/base.repository';\n@Injectable()\nexport class PostsRepository extends BaseRepository {\n  constructor(\n    @InjectModel(PostModel.name) private readonly postModel: Model,\n  ) {\n    super(postModel);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/posts/posts.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPaginated\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsRepository: PostsRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/posts/posts.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        PostsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: TCreateDto)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseService\n\n                \n            \n            \n                \n                        Defined in         BaseService:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                            TCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(filter: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseService\n\n                \n            \n            \n                \n                        Defined in         BaseService:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseService\n\n                \n            \n            \n                \n                        Defined in         BaseService:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseService\n\n                \n            \n            \n                \n                        Defined in         BaseService:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPaginated\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPaginated(input: FindPaginatedInput)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseService\n\n                \n            \n            \n                \n                        Defined in         BaseService:19\n\n                \n            \n\n\n            \n                \n                    This descibes the function\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                            FindPaginatedInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            findPaginated({meta: {limit: 10, page: 1}, filter: {}})\n                        \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        result in format of data and meta\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseService\n\n                \n            \n            \n                \n                        Defined in         BaseService:46\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: TUpdateDto)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseService\n\n                \n            \n            \n                \n                        Defined in         BaseService:42\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                            TUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreatePostDto } from 'types';\nimport { UpdatePostDto } from 'types';\nimport { PostModel } from './post.model';\nimport { BaseService } from '../base/base.service';\nimport { PostsRepository } from './posts.repository';\n@Injectable()\nexport class PostsService extends BaseService {\n  constructor(private readonly postsRepository: PostsRepository) {\n    super(postsRepository);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/request.type.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     JwtPayload\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     JwtPayload\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { JwtPayload } from 'types';\n\nexport interface RequestWithUser extends Request {\n  user: JwtPayload;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenMiddleware.html":{"url":"injectables/TokenMiddleware.html","title":"injectable - TokenMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TokenMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/auth/token.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/modules/auth/token.middleware.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: any, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/modules/auth/token.middleware.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Response, NextFunction } from 'express';\nimport { RequestWithUser } from './request.type';\nimport { JwtPayload } from 'types';\n\n@Injectable()\nexport class TokenMiddleware implements NestMiddleware {\n  constructor(private readonly jwtService: JwtService) {}\n  use(req: any, res: Response, next: NextFunction) {\n    const bearerToken = req.headers['authorization'];\n    if (!bearerToken) {\n      next();\n      return;\n    }\n    const token = bearerToken.split(' ')[1];\n    if (!token) {\n      next();\n      return;\n    }\n\n    const user = this.jwtService.verify(token);\n    if (!user) {\n      next();\n      return;\n    }\n\n    (req as unknown as RequestWithUser).user = user;\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserModel.html":{"url":"classes/UserModel.html","title":"class - UserModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/user.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseModel\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                username\n                            \n                            \n                                _id\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/modules/users/user.model.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseModel\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseModel:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         BaseModel\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseModel:7\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { HydratedDocument } from 'mongoose';\nimport { BaseModel } from '../base/base.model';\n\nexport type UserDocument = HydratedDocument;\n\n@Schema()\nexport class UserModel extends BaseModel {\n  @Prop()\n  username: string;\n  @Prop()\n  password: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(UserModel);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                            CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/modules/users/users.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from 'types';\nimport { ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get()\n  async findAll() {\n    const users = await this.usersService.findAll();\n    return users;\n  }\n\n  @Post()\n  async create(@Body() createUserDto: CreateUserDto) {\n    const user = await this.usersService.create(createUserDto);\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersRepository\n\nUsersRepository\n\nUsersModule -->\n\nUsersRepository->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/modules/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersRepository\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { UserModel, UserSchema } from './user.model';\nimport { BaseService } from '../base/base.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersRepository } from './users.repository';\nimport { BaseRepository } from '../base/base.repository';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: UserModel.name, schema: UserSchema }]),\n  ],\n  controllers: [UsersController],\n  providers: [\n    UsersService,\n    {\n      provide: BaseService,\n      useClass: UsersService,\n    },\n    UsersRepository,\n    {\n      provide: BaseRepository,\n      useClass: UsersRepository,\n    },\n  ],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersRepository.html":{"url":"injectables/UsersRepository.html","title":"injectable - UsersRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseRepository\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPaginated\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.repository.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: TCreateDto)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseRepository\n\n                \n            \n            \n                \n                        Defined in         BaseRepository:48\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                            TCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(filter: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseRepository\n\n                \n            \n            \n                \n                        Defined in         BaseRepository:45\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseRepository\n\n                \n            \n            \n                \n                        Defined in         BaseRepository:53\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseRepository\n\n                \n            \n            \n                \n                        Defined in         BaseRepository:57\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPaginated\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPaginated(input: FindPaginatedInput)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseRepository\n\n                \n            \n            \n                \n                        Defined in         BaseRepository:11\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                            FindPaginatedInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseRepository\n\n                \n            \n            \n                \n                        Defined in         BaseRepository:66\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: TUpdateDto)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseRepository\n\n                \n            \n            \n                \n                        Defined in         BaseRepository:61\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                            TUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UserModel } from './user.model';\nimport { CreateUserDto } from 'types';\nimport { UpdateUserDto } from 'types';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { BaseRepository } from '../base/base.repository';\n\n@Injectable()\nexport class UsersRepository extends BaseRepository {\n  constructor(\n    @InjectModel(UserModel.name) private readonly userModel: Model,\n  ) {\n    super(userModel);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/modules/users/users.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        BaseService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findPaginated\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: UsersRepository)\n                    \n                \n                        \n                            \n                                Defined in src/modules/users/users.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        UsersRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createDto: TCreateDto)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseService\n\n                \n            \n            \n                \n                        Defined in         BaseService:30\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createDto\n                                    \n                                            TCreateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        find\n                        \n                    \n                \n            \n            \n                \n                    \n                    find(filter: any)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseService\n\n                \n            \n            \n                \n                        Defined in         BaseService:27\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filter\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseService\n\n                \n            \n            \n                \n                        Defined in         BaseService:34\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseService\n\n                \n            \n            \n                \n                        Defined in         BaseService:38\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPaginated\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPaginated(input: FindPaginatedInput)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseService\n\n                \n            \n            \n                \n                        Defined in         BaseService:19\n\n                \n            \n\n\n            \n                \n                    This descibes the function\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                            FindPaginatedInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            findPaginated({meta: {limit: 10, page: 1}, filter: {}})\n                        \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        result in format of data and meta\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseService\n\n                \n            \n            \n                \n                        Defined in         BaseService:46\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateDto: TUpdateDto)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseService\n\n                \n            \n            \n                \n                        Defined in         BaseService:42\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateDto\n                                    \n                                            TUpdateDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { BaseService } from '../base/base.service';\nimport { UserModel } from './user.model';\nimport { CreateUserDto } from 'types';\nimport { UpdateUserDto } from 'types';\nimport { UsersRepository } from './users.repository';\n\n@Injectable()\nexport class UsersService extends BaseService {\n  constructor(private readonly usersRepository: UsersRepository) {\n    super(usersRepository);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nserver\n1.0.31\nPatch Changes\n\n22bbfab: Add suppirt for json import\nUpdated dependencies [22bbfab]\nconfig@1.0.30\n\n\n\n1.0.30\nPatch Changes\n\n596ba2a: You can now get server version on index route\n0c467f3: You can now see current time on home route\n\n1.0.29\nPatch Changes\n\n47f134c: qqq\nUpdated dependencies [47f134c]\nconfig@1.0.29\ntypes@1.0.29\n\n\n\n1.0.28\nPatch Changes\n\n78e45fa: y\nUpdated dependencies [78e45fa]\nconfig@1.0.28\ntypes@1.0.28\n\n\n\n1.0.27\nPatch Changes\n\n7686f57: YY\nUpdated dependencies [7686f57]\nconfig@1.0.27\ntypes@1.0.27\n\n\n\n1.0.26\nPatch Changes\n\nf0d6568: AA\nUpdated dependencies [f0d6568]\nconfig@1.0.26\ntypes@1.0.26\n\n\n\n1.0.25\nPatch Changes\n\n2f6ed30: YY\nUpdated dependencies [2f6ed30]\nconfig@1.0.25\ntypes@1.0.25\n\n\n\n1.0.24\nPatch Changes\n\nfd94952: AA\nUpdated dependencies [fd94952]\nconfig@1.0.24\ntypes@1.0.24\n\n\n\n1.0.23\nPatch Changes\n\n6e397a5: test flow\nUpdated dependencies [6e397a5]\nconfig@1.0.23\ntypes@1.0.23\n\n\n\n1.0.22\nPatch Changes\n\nb0d8999: Working relase and deploy flows\nUpdated dependencies [b0d8999]\nconfig@1.0.22\ntypes@1.0.22\n\n\n\n1.0.21\nPatch Changes\n\na9ea2a4: Release working\nUpdated dependencies [a9ea2a4]\nconfig@1.0.21\ntypes@1.0.21\n\n\n\n1.0.20\nPatch Changes\n\n5b4ceb8: A\nUpdated dependencies [5b4ceb8]\nconfig@1.0.20\ntypes@1.0.20\n\n\n\n1.0.19\nPatch Changes\n\ne135652: A\nUpdated dependencies [e135652]\nconfig@1.0.19\ntypes@1.0.19\n\n\n\n1.0.18\nPatch Changes\n\n3192fce: aah\nUpdated dependencies [3192fce]\nconfig@1.0.18\ntypes@1.0.18\n\n\n\n1.0.17\nPatch Changes\n\nae779f1: aa\nUpdated dependencies [ae779f1]\nconfig@1.0.17\ntypes@1.0.17\n\n\n\n1.0.16\nPatch Changes\n\n551a9d4: test\nUpdated dependencies [551a9d4]\nconfig@1.0.16\ntypes@1.0.16\n\n\n\n1.0.15\nPatch Changes\n\na2dbf88: Yes\nUpdated dependencies [a2dbf88]\nconfig@1.0.15\ntypes@1.0.15\n\n\n\n1.0.14\nPatch Changes\n\nd285d72: try\nUpdated dependencies [d285d72]\nconfig@1.0.14\ntypes@1.0.14\n\n\n\n1.0.13\nPatch Changes\n\n7cd92e4: Test deploy\nUpdated dependencies [7cd92e4]\nconfig@1.0.13\ntypes@1.0.13\n\n\n\n1.0.12\nPatch Changes\n\ne516ea5: Add docker publish test\nUpdated dependencies [e516ea5]\nconfig@1.0.12\ntypes@1.0.12\n\n\n\n1.0.11\nPatch Changes\n\na87d94a: test\nUpdated dependencies [a87d94a]\nconfig@1.0.11\ntypes@1.0.11\n\n\n\n1.0.10\nPatch Changes\n\nc032205: test\nUpdated dependencies [c032205]\nconfig@1.0.10\ntypes@1.0.10\n\n\n\n1.0.9\nPatch Changes\n\n0f1c60e: Adding release workflow\nUpdated dependencies [0f1c60e]\nconfig@1.0.9\ntypes@1.0.9\n\n\n\n1.0.8\nPatch Changes\n\ne980415: Test\nUpdated dependencies [e980415]\nconfig@1.0.8\ntypes@1.0.8\n\n\n\n1.0.7\nPatch Changes\n\nTesting version bump\nUpdated dependencies\nconfig@1.0.7\ntypes@1.0.7\n\n\n\n1.0.6\nPatch Changes\n\nFirst release of unified versions\nUpdated dependencies\ntypes@1.0.6\nconfig@1.0.6\n\n\n\n0.0.3\nPatch Changes\n\nTesting changeste\nUpdated dependencies\nconfig@0.0.2\ntypes@0.0.4\n\n\n\n0.0.2\nPatch Changes\n\n30f3121: First bump\nUpdated dependencies [30f3121]\nconfig@0.0.1\ntypes@0.0.3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                jest.config.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.module-defenition.ts\n            \n            interface\n            AppModuleOptions\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module-defenition.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/conf.ts\n            \n            variable\n            conf\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            swaggerSetup\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/auth/auth.service.ts\n            \n            variable\n            saltOrRounds\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/auth/dto/auth.dto.ts\n            \n            variable\n            AuthDTOSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/request.type.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/modules/auth/requestor.decorator.ts\n            \n            variable\n            Requestor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/auth/token.middleware.ts\n            \n            injectable\n            TokenMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/base/base.controller.ts\n            \n            class\n            BaseController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/modules/base/base.model.ts\n            \n            class\n            BaseModel\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/base/base.repository.ts\n            \n            injectable\n            BaseRepository\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/base/base.service.ts\n            \n            injectable\n            BaseService\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/modules/posts/post.model.ts\n            \n            class\n            PostModel\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/modules/posts/post.model.ts\n            \n            variable\n            PostSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/posts/posts.repository.ts\n            \n            injectable\n            PostsRepository\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/modules/users/user.model.ts\n            \n            class\n            UserModel\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/modules/users/user.model.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/modules/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/modules/users/users.repository.ts\n            \n            injectable\n            UsersRepository\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/modules/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                test/jest.config.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.3\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^9.2.2\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.3.0\n        \n            @types/bcrypt : ^5.0.0\n        \n            bcrypt : ^5.1.0\n        \n            mongoose : ^7.2.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            zod : ^3.22.3\n        \n            config : *\n        \n            types : *\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ yarn installRunning the app\n# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\n# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsRepository\n\nPostsRepository\n\nPostsModule -->\n\nPostsRepository->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersRepository\n\nUsersRepository\n\nUsersModule -->\n\nUsersRepository->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.31\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostDocument   (src/.../post.model.ts)\n                        \n                        \n                            UserDocument   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/posts/post.model.ts\n    \n    \n        \n            \n                \n                    \n                    PostDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n    src/modules/users/user.model.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                            HydratedDocument\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthDTOSchema   (src/.../auth.dto.ts)\n                        \n                        \n                            conf   (src/.../conf.ts)\n                        \n                        \n                            config   (jest.config.ts)\n                        \n                        \n                            config   (test/.../jest.config.ts)\n                        \n                        \n                            PostSchema   (src/.../post.model.ts)\n                        \n                        \n                            Requestor   (src/.../requestor.decorator.ts)\n                        \n                        \n                            saltOrRounds   (src/.../auth.service.ts)\n                        \n                        \n                            swaggerSetup   (src/.../main.ts)\n                        \n                        \n                               (src/.../app.module-defenition.ts)\n                        \n                        \n                            UserSchema   (src/.../user.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/modules/auth/dto/auth.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthDTOSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  username: z.string().email(),\n  password: z.string().min(8),\n})\n                    \n                \n\n\n        \n    \n\n    src/conf.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        conf\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  db: {\n    uri: process.env.MONGO_URI as string,\n  },\n  auth: {\n    secret: process.env.JWT_SECRET as string,\n  },\n}\n                    \n                \n\n\n        \n    \n\n    jest.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Config.InitialOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  ...base,\n  //setupFiles: ['../../packages/config/jest/test-config.ts']\n}\n                    \n                \n\n\n        \n    \n\n    test/jest.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Config.InitialOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  ...base,\n  setupFiles: ['../../packages/config/jest/test-config.ts'],\n}\n                    \n                \n\n\n        \n    \n\n    src/modules/posts/post.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PostSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(PostModel)\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/requestor.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Requestor\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/modules/auth/auth.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        saltOrRounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        swaggerSetup\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (app: INestApplication) => {\n  const config = new DocumentBuilder()\n    .addBearerAuth(\n      {\n        type: 'http',\n      },\n      'default',\n    )\n    .setTitle('Cats example')\n    .setDescription('The cats API description')\n    .setVersion('1.0')\n    .addTag('cats')\n    .build();\n  const document = SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('doc', app, document);\n}\n                    \n                \n\n\n        \n    \n\n    src/app.module-defenition.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : new ConfigurableModuleBuilder().build()\n                    \n                \n\n\n        \n    \n\n    src/modules/users/user.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(UserModel)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
