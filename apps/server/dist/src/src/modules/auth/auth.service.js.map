{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../../../../src/modules/auth/auth.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAmE;AACnE,+CAAiC;AACjC,qCAAyC;AACzC,0DAAsD;AAItD,MAAM,YAAY,GAAG,EAAE,CAAC;AAEjB,IAAM,WAAW,yBAAjB,MAAM,WAAW;IACtB,YACmB,YAA0B,EAC1B,UAAsB;QADtB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,eAAU,GAAV,UAAU,CAAY;IACtC,CAAC;IAEJ,KAAK,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAW;QAC5C,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;QACjE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;YAC1C,QAAQ;YACR,QAAQ,EAAE,cAAc;SACzB,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAW;QACzC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;QAEzD,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,8BAAqB,CAAC,kBAAkB,CAAC,CAAC;SACrD;QACD,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,eAAe,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACtE,IAAI,CAAC,eAAe,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;SACrC;QACD,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QACjC,MAAM,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAC1C,MAAM,OAAO,GAAe;YAC1B,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE;YACxB,QAAQ;YACR,GAAG;YACH,GAAG;SACJ,CAAC;QACF,OAAO;YACL,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;SAC5C,CAAC;IACJ,CAAC;CACF,CAAA;sBAtCY,WAAW;IADvB,IAAA,mBAAU,GAAE;qCAGsB,4BAAY;QACd,gBAAU;GAH9B,WAAW,CAsCvB","sourcesContent":["import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersService } from '../users/users.service';\nimport { AuthDto } from './dto/auth.dto';\nimport { JwtPayload } from './jwt-payload.type';\n\nconst saltOrRounds = 10;\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async register({ username, password }: AuthDto) {\n    const hashedPassword = await bcrypt.hash(password, saltOrRounds);\n    const user = await this.usersService.create({\n      username,\n      password: hashedPassword,\n    });\n    return user;\n  }\n\n  async login({ username, password }: AuthDto) {\n    const users = await this.usersService.find({ username });\n\n    if (!users) {\n      throw new UnauthorizedException('Invalid username');\n    }\n    const user = users[0];\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n    if (!isPasswordValid) {\n      throw new Error('Invalid password');\n    }\n    const iat = new Date().getTime();\n    const exp = iat + 1000 * 60 * 60 * 24 * 2;\n    const payload: JwtPayload = {\n      _id: user._id.toString(),\n      username,\n      iat,\n      exp,\n    };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n"]}