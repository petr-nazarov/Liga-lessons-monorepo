{"version":3,"file":"auth.controller.js","sourceRoot":"","sources":["../../../../../src/modules/auth/auth.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAQwB;AACxB,iDAA6C;AAC7C,6CAAyD;AACzD,6CAAyD;AACzD,+DAAkD;AAElD,6CAAyC;AAGlC,IAAM,cAAc,4BAApB,MAAM,cAAc;IACzB,YAA6B,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAG,CAAC;IAKnD,AAAN,KAAK,CAAC,EAAE,CAAY,OAAO,EAAe,SAAqB;QAC7D,OAAO,SAAS,CAAC;IAEnB,CAAC;IAGK,AAAN,KAAK,CAAC,QAAQ,CAAS,OAAgB;QACrC,MAAM,UAAU,GAAG,wBAAa,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACpD,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACvB,MAAM,IAAI,4BAAmB,CAAC,UAAU,CAAC,CAAC;SAC3C;QACD,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAkB,CAAC,CAAC;IAC7D,CAAC;IAGK,AAAN,KAAK,CAAC,KAAK,CAAS,OAAgB;QAClC,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC/C,CAAC;CACF,CAAA;AAlBO;IAHL,IAAA,YAAG,EAAC,KAAK,CAAC;IACV,IAAA,uBAAa,EAAC,SAAS,CAAC;IACxB,IAAA,kBAAS,EAAC,sBAAS,CAAC;IACX,WAAA,IAAA,gBAAO,GAAE,CAAA;IAAW,WAAA,IAAA,+BAAS,GAAE,CAAA;;;;wCAGxC;AAGK;IADL,IAAA,aAAI,EAAC,UAAU,CAAC;IACD,WAAA,IAAA,aAAI,GAAE,CAAA;;qCAAU,kBAAO;;8CAMtC;AAGK;IADL,IAAA,aAAI,EAAC,OAAO,CAAC;IACD,WAAA,IAAA,aAAI,GAAE,CAAA;;qCAAU,kBAAO;;2CAEnC;yBAvBU,cAAc;IAF1B,IAAA,mBAAU,EAAC,MAAM,CAAC;IAClB,IAAA,iBAAO,EAAC,MAAM,CAAC;qCAE4B,0BAAW;GAD1C,cAAc,CAwB1B","sourcesContent":["import {\n  Controller,\n  Get,\n  Headers,\n  Body,\n  Post,\n  UseGuards,\n  BadRequestException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport {  AuthDTOSchema, AuthDto } from './dto/auth.dto';\nimport { ApiTags, ApiBearerAuth } from '@nestjs/swagger';\nimport { Requestor } from './requestor.decorator';\nimport { JwtPayload } from './jwt-payload.type';\nimport { AuthGuard } from './auth.guard';\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Get('/me')\n  @ApiBearerAuth('default')\n  @UseGuards(AuthGuard)\n  async me(@Headers() headers, @Requestor() requestor: JwtPayload) {\n    return requestor;\n    //return await this.authService.me();\n  }\n\n  @Post('register')\n  async register(@Body() authDto: AuthDto) {\n    const validation = AuthDTOSchema.safeParse(authDto);\n    if (!validation.success) {\n      throw new BadRequestException(validation);\n    }\n    return await this.authService.register(authDto as AuthDto);\n  }\n\n  @Post('login')\n  async login(@Body() authDto: AuthDto) {\n    return await this.authService.login(authDto);\n  }\n}\n"]}